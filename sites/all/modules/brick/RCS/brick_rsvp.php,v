head	1.37;
access;
symbols;
locks; strict;
comment	@# @;


1.37
date	2013.12.18.03.08.56;	author jordan;	state Exp;
branches;
next	1.36;

1.36
date	2013.09.12.21.39.02;	author crc;	state Exp;
branches;
next	1.35;

1.35
date	2013.08.01.19.26.18;	author jordan;	state Exp;
branches;
next	1.34;

1.34
date	2013.07.30.17.31.15;	author jordan;	state Exp;
branches;
next	1.33;

1.33
date	2013.07.26.22.24.15;	author jordan;	state Exp;
branches;
next	1.32;

1.32
date	2013.07.26.22.14.06;	author jordan;	state Exp;
branches;
next	1.31;

1.31
date	2013.07.26.22.12.07;	author jordan;	state Exp;
branches;
next	1.30;

1.30
date	2013.07.26.20.21.31;	author crc;	state Exp;
branches;
next	1.29;

1.29
date	2013.06.27.23.47.55;	author crc;	state Exp;
branches;
next	1.28;

1.28
date	2013.06.27.21.10.18;	author jordan;	state Exp;
branches;
next	1.27;

1.27
date	2013.06.26.05.39.45;	author jacob;	state Exp;
branches;
next	1.26;

1.26
date	2013.06.26.04.14.31;	author jacob;	state Exp;
branches;
next	1.25;

1.25
date	2013.06.25.22.39.55;	author jordan;	state Exp;
branches;
next	1.24;

1.24
date	2013.06.25.22.39.15;	author crc;	state Exp;
branches;
next	1.23;

1.23
date	2013.06.02.23.18.54;	author jordan;	state Exp;
branches;
next	1.22;

1.22
date	2013.04.05.23.55.38;	author crc;	state Exp;
branches;
next	1.21;

1.21
date	2013.03.17.03.19.34;	author jordan;	state Exp;
branches;
next	1.20;

1.20
date	2013.03.17.00.42.56;	author jordan;	state Exp;
branches;
next	1.19;

1.19
date	2013.02.05.19.38.07;	author jacob;	state Exp;
branches;
next	1.18;

1.18
date	2012.11.27.04.05.34;	author jacob;	state Exp;
branches;
next	1.17;

1.17
date	2012.10.06.07.04.18;	author jordan;	state Exp;
branches;
next	1.16;

1.16
date	2012.10.03.20.54.31;	author crc;	state Exp;
branches;
next	1.15;

1.15
date	2012.10.03.19.07.33;	author crc;	state Exp;
branches;
next	1.14;

1.14
date	2012.10.02.03.46.55;	author jordan;	state Exp;
branches;
next	1.13;

1.13
date	2012.10.02.03.44.35;	author jordan;	state Exp;
branches;
next	1.12;

1.12
date	2012.08.14.02.54.23;	author ubuntu;	state Exp;
branches;
next	1.11;

1.11
date	2012.08.10.04.10.48;	author jordan;	state Exp;
branches;
next	1.10;

1.10
date	2012.07.17.03.11.07;	author jordan;	state Exp;
branches;
next	1.9;

1.9
date	2012.07.03.03.13.48;	author ubuntu;	state Exp;
branches;
next	1.8;

1.8
date	2012.02.29.08.09.46;	author jordan;	state Exp;
branches;
next	1.7;

1.7
date	2012.02.08.06.16.36;	author jordan;	state Exp;
branches;
next	1.6;

1.6
date	2012.02.02.02.01.25;	author jordan;	state Exp;
branches;
next	1.5;

1.5
date	2012.01.27.02.00.13;	author crc;	state Exp;
branches;
next	1.4;

1.4
date	2012.01.25.05.57.24;	author crc;	state Exp;
branches;
next	1.3;

1.3
date	2012.01.25.03.20.57;	author crc;	state Exp;
branches;
next	1.2;

1.2
date	2012.01.25.02.10.55;	author crc;	state Exp;
branches;
next	1.1;

1.1
date	2012.01.25.02.00.55;	author root;	state Exp;
branches;
next	;


desc
@@


1.37
log
@*** empty log message ***
@
text
@<?php
// $Id: brick_rsvp.php,v 1.36 2013/09/12 21:39:02 crc Exp jordan $

/**
 * @@file
 *
 * A module that contains utility functions used across the One Brick website.
 */

function brick_get_event_role($eventid, $userid) {
$q = "SELECT DISTINCT
    field_revision_field_rsvp_role.field_rsvp_role_value
  FROM field_revision_field_rsvp_event
    left join field_revision_field_rsvp_person
      on field_revision_field_rsvp_event.entity_id=field_revision_field_rsvp_person.entity_id
    left join field_revision_field_rsvp_role
      on field_revision_field_rsvp_event.entity_id=field_revision_field_rsvp_role.entity_id
    left join users
      on field_revision_field_rsvp_person.field_rsvp_person_uid=users.uid
        join node
      on node.nid = field_revision_field_rsvp_event.entity_id
  WHERE node.status = 1 and 
	 field_rsvp_event_nid = 30319 and
	 field_revision_field_rsvp_person.field_rsvp_person_uid = 1";

   return(db_query($q)->fetchField());
}

function brick_get_rsvp_list($node) {
   return brick_get_rsvp_list_id($node->nid);
}

function brick_get_rsvp_list_id($nid) {
  $q = "
  SELECT DISTINCT
    field_revision_field_rsvp_person.field_rsvp_person_uid as uid,
    field_revision_field_rsvp_role.field_rsvp_role_value as role,
    users.mail,
    field_revision_field_user_fullname.field_user_fullname_value as fullname,
    field_revision_field_rsvp_event.entity_id as entity_id
  FROM field_revision_field_rsvp_event
    left join field_revision_field_rsvp_person
      on field_revision_field_rsvp_event.entity_id=field_revision_field_rsvp_person.entity_id
    left join field_revision_field_rsvp_role
      on field_revision_field_rsvp_event.entity_id=field_revision_field_rsvp_role.entity_id
    left join users
      on field_revision_field_rsvp_person.field_rsvp_person_uid=users.uid
    left join field_revision_field_user_fullname 
      on field_revision_field_rsvp_person.field_rsvp_person_uid=field_revision_field_user_fullname.entity_id
    join node
      on node.nid = field_revision_field_rsvp_event.entity_id
  WHERE node.status = 1 AND field_rsvp_event_nid = ".$nid;

  return(db_query($q));
}

function brick_get_attendee_list($node) {
  $q = "
  SELECT DISTINCT
    field_revision_field_rsvp_person.field_rsvp_person_uid as uid,
    field_revision_field_rsvp_role.field_rsvp_role_value as role,
    users.mail,
    field_revision_field_user_fullname.field_user_fullname_value as fullname,
    field_revision_field_rsvp_event.entity_id as entity_id
  FROM field_revision_field_rsvp_event
    left join field_revision_field_rsvp_person
      on field_revision_field_rsvp_event.entity_id=field_revision_field_rsvp_person.entity_id
    left join field_revision_field_rsvp_role
      on field_revision_field_rsvp_event.entity_id=field_revision_field_rsvp_role.entity_id
    left join users
      on field_revision_field_rsvp_person.field_rsvp_person_uid=users.uid
    left join field_revision_field_user_fullname 
      on field_revision_field_rsvp_person.field_rsvp_person_uid=field_revision_field_user_fullname.entity_id
    join node
      on node.nid = field_revision_field_rsvp_event.entity_id
		left join field_revision_field_rsvp_attended on field_revision_field_rsvp_attended.entity_id = field_revision_field_rsvp_event.entity_id
		where field_rsvp_attended_value = 1 and
  		node.status = 1 AND field_rsvp_event_nid = ".$node->nid;

  return(db_query($q));
}

function brick_remap_manager_coordinator_rsvps($event, $managers, $coordinators) {
   $currentRSVPs = brick_get_rsvp_list($event)->fetchAll();

   $idToRSVPId = array();

   $currentManagers = NULL;
   $currentCoordinators = NULL;
   $currentVolunteers = NULL;
   $wasManagerAVolunteer = NULL;

   // first entry is uid, second entry is their role
   foreach ($currentRSVPs as $rsvp) {
      if ($rsvp->role == 'Manager') {
         $currentManagers[] = $rsvp->uid;
      }
      else if ($rsvp->role == 'Coordinator') {
	 $currentCoordinators[] = $rsvp->uid;
      }
      else {
         $currentVolunteers[] = $rsvp->uid;
      }
      // a map from uid to rsvp id 
      $idToRSVPId[$rsvp->uid] = $rsvp->entity_id;
   }

   remap_manager_data($event->nid, $managers, $currentManagers, $currentVolunteers, 'Manager', $idToRSVPId);
   remap_manager_data($event->nid, $coordinators, $currentCoordinators, $currentVolunteers, 'Coordinator', $idToRSVPId);
}

function remap_manager_data($evid, $newList, $oldList, $volunteers, $userType, $idToRSVPId) {
   $toAdd = $oldList == NULL ? $newList : array_diff($newList, $oldList);
   $toRemove = $oldList == NULL ? array() : array_diff($oldList, $newList);

   // people we need to add
   foreach ($toAdd as $addMe) {
      $assigned = NULL;
 
      // if this manager WAS a volunteer, we remove the old rsvp and add them with the "assigned" flag to "TRUE"
      if ($volunteers && in_array($addMe, $volunteers)) {
         $assigned = 'TRUE';

         $rsvpId = $idToRSVPId[$addMe];

	 brick_delete_rsvp($rsvpId);
      }

      brick_add_rsvp($evid, $addMe, '', 1, $userType, $assigned);

      // is there an existing opt-in? if not, we create one with "assigned on created" set to true
      $optinRes = brick_optin_get_existing($addMe, $evid, $userType);
  
      if ($optinRes->rowCount() == 0) {
         // opt-in created wtih asc set to true
         brick_optin_add($toAdd, $evid, $userType, brick_optin_pref_val_to_string(1), 'TRUE'); 
      }
   }

   // people we need to remove -> we just re-add them as a volunteer and set assigned flag to false
   foreach ($toRemove as $removeMe) {
         $rsvpId = $idToRSVPId[$removeMe];

         brick_delete_rsvp($rsvpId);
   
         brick_add_rsvp($evid, $removeMe, '', 1, 'Volunteer', 'FALSE');
   
	 // remove the opt-in if the 'assigned when created' is set to true (the user didn't manually create the opt-in)
	 $optinRes = brick_optin_get_existing($removeMe, $evid, $userType);
	 $optinId = $optinRes->fetchColumn();

	 $optNd = node_load($optinId);

	 if ($optNd && $optNd->field_optin_created_when_assign['und'][0]['value'] == 'TRUE') {
            node_delete($optinId);	    
	 }
   }
}

function brick_rsvp_count($nid) {
	 $q = "SELECT count(field_data_field_rsvp_event.entity_id) FROM field_data_field_rsvp_person 
	  LEFT JOIN field_data_field_rsvp_event ON field_data_field_rsvp_person.entity_id = field_data_field_rsvp_event.entity_id
		INNER JOIN node on node.nid = field_data_field_rsvp_event.entity_id
		WHERE node.status and field_data_field_rsvp_event.field_rsvp_event_nid = ".$nid;
   return(db_query($q)->fetchField());
}

function brick_attended_count($nid) {
	 $q = "
		SELECT count(*) FROM `field_revision_field_rsvp_attended`
		LEFT JOIN field_data_field_rsvp_event ON field_revision_field_rsvp_attended.entity_id = field_data_field_rsvp_event.entity_id
		where field_rsvp_attended_value = 1 and
		field_data_field_rsvp_event.field_rsvp_event_nid = ".$nid;
   return(db_query($q)->fetchField());
}

function brick_event_full($node) {
   $c = brick_rsvp_count($node->nid);

  /* debug 
		printf("Requested: %s, RSVP Capacity: %s, RSVPed: %s",
    $node->field_event_requested['und'][0]['value'],
    $node->field_event_max_rsvp_capacity['und'][0]['value'],
    $c);*/

  return($c >= $node->field_event_max_rsvp_capacity['und'][0]['value']);
}

function brick_manager_add_rsvp_ajax($eid, $uid) {
   brick_add_rsvp($eid, $uid, '', 0);
 
   $commands = array();
   
   $commands[] = ajax_command_replace('.row-user-' . $uid . ' .add-user-link', 'User Added!');
   
   return array('#type' => 'ajax', '#commands' => $commands);
}

function brick_manager_add_rsvp($eid, $uid) {
   brick_add_rsvp($eid, $uid, '', 0);
   drupal_set_message(t('User added to event'));

   // go back to the same page
   drupal_goto( $_SERVER['HTTP_REFERER'] );
}

function brick_add_rsvp($eid, $uid, $note, $public = 1, $role = 'Volunteer', $assigned = '') {
    $node = new StdClass();
    $node->type = 'rsvp';
    $node->status = 1;
    $node->title = 'new rsvp';
    $node->uid = $uid;
    $node->created = REQUEST_TIME;
    $node->changed = REQUEST_TIME;
    $node->comment = 2;
    $node->language = 'und';
    $node->field_rsvp_event['und'][0]['nid'] = $eid;
    $node->field_rsvp_person['und'][0]['uid'] = $uid;
    $node->field_rsvp_role['und'][0]['value'] = $role;
    $node->field_rsvp_note['und'][0]['value'] = $note;
    $node->field_public['und'][0]['value'] = $public;

    if ($assigned) {
        $node->field_rsvp_created_when_assigned['und'][0]['value'] = $assigned;
    }

    $node = node_submit($node);
    node_save($node);
}

function brick_rsvp_get_attended($rsvp_id) {
	$node = node_load($rsvp_id);
	return $node->field_rsvp_attended['und'][0]['value'];
}

function brick_rsvp_set_attended($rsvp_id, $attended) {
	$node = node_load($rsvp_id);
	$node->field_rsvp_attended['und'][0]['value'] = $attended;
	node_save($node);
}

function brick_dounrsvp() {
  $nid = $_POST["nid"];
  $uid = $_POST["uid"];

  $r = brick_get_rsvp_query($nid, $uid);

  $rsvpId = $r->fetchField();

  watchdog("INFO", "DELETING" . $rsvpId);

  brick_delete_rsvp($rsvpId);

  drupal_set_message(t('You have been removed from this event.'), 'status');

  // go back to the same page
  drupal_goto( $_SERVER['HTTP_REFERER'] );
}

function brick_delete_rsvp($rsvpId) {
   node_delete($rsvpId);
}

function brick_get_rsvp_status($n, $u) {
   return brick_get_rsvp_id($n->nid, $u->uid) > 0;
}

function brick_get_rsvp_id($eid, $uid) {
   $r = brick_get_rsvp_query($eid, $uid);
   if ($r->rowCount() < 1)
       return 0;
   $arr = $r->fetchCol();
   return $arr[0];
}

function brick_get_rsvp_query($nid, $uid) {
   return db_query("SELECT field_data_field_rsvp_event.entity_id FROM field_data_field_rsvp_person 
  LEFT JOIN field_data_field_rsvp_event ON field_data_field_rsvp_person.entity_id
     = field_data_field_rsvp_event.entity_id
  INNER JOIN node on node.nid = field_data_field_rsvp_event.entity_id
  WHERE field_data_field_rsvp_person.field_rsvp_person_uid = $uid
  AND field_data_field_rsvp_event.field_rsvp_event_nid = $nid
  AND node.status = 1");
}

function brick_is_full_user($user) {
   // uid = 0 is anonymouse user
   return !empty($user) && $user->uid != 0 &&!in_array('guest_user', array_values($user->roles));
}

function brick_rsvp_form($form, $form_state, $nid) {
    global $user;

    $account = user_load($user->uid);
    $name = brick_get_user_name($account);
    $email = $user && property_exists($user, "mail") ? $user->mail : "";

    $submittedEmail = NULL;
    $checkForPassword = FALSE;

    if (array_key_exists('values', $form_state)) {
       $submittedEmail = $form_state['values']['email'];
    
       if ($submittedEmail) {
          $currentUser = user_load_by_mail($submittedEmail);
       
	  $checkForPassword = check_if_user_needs_login($currentUser);
       }
    }

    $form['rsvp'] = array(
		'#type' => "container",
                '#attributes' => array(
                        'id' => 'rsvpFormWrap'
                )
    );
 
    $form['rsvp']['email'] = array(
		'#type' => "textfield",
		'#title' => t('Your Email (so we can contact you):'),
		'#size' => 40,
		'#required' => FALSE,
        	'#default_value' => $email
    );


    if ($checkForPassword) {
	$form['rsvp']['password'] = array(
       		'#type' => "password",
       		'#title' => t('Your Password:'),
       		'#size' => 40,
       		'#required' => FALSE    
    	);

	$form['rsvp']['name'] = array(
                '#type' => "hidden",
                '#required' => FALSE,
                '#value' => ''
        );
    }
    else {
    	$form['rsvp']['name'] = array(
                '#type' => "textfield",
                '#title' => t('Your Name (so we know what to call you!):'),
                '#size' => 40,
                '#required' => FALSE,
                '#default_value' => $name
    	);
    }

    // you can't edit your email / name if you're a full user
    if ($user && brick_is_full_user($user)) {
      	$form['rsvp']['email']['#disabled'] = TRUE;
       
        if (array_key_exists('name', $form['rsvp'])) {
		$form['rsvp']['name']['#disabled'] = TRUE;
	}
    }

    $form['rsvp']['public'] = array(
    	'#type' => "checkbox",
        '#title' => t('Allow my attendance to be public'),
        '#size' => 40,
        '#required' => FALSE,
        '#default_value' => TRUE
    );
    
    $rsvpAgree = "By submitting my RSVP, I acknowledge that I am over 18 years of age. 
        I have read, and agree to <a href='/waiver' 
        target='_blank'>​One Brick's Waiver, Assumption of Risk and Release.​</a>​";
    
	$form['rsvp']['rsvpAgree'] = array(
		'#markup' => $rsvpAgree
    );

    $form['rsvp']['message'] = array(
      	  '#type' => "textarea",
      	  '#title' => t('A message for the event managers (optional):'),
	  '#rows' => 2,
	  '#required' => FALSE      
    );
    
    $form['rsvp']['nid'] = array(
		'#type' => 'hidden',
		'#value' => $nid,
		'#default_value' => $nid
	);
    
   $form['rsvp']['buttonArea']['submitRSVP'] = array(
		'#type' => "button",
		'#value' => t('RSVP'),
		'#ajax' => array(
			'wrapper' => 'rsvpFormWrap',
			'callback' => 'brick_rsvp_ajax',
			'method' => 'html'
		)
    );
    

    return $form;
}

// returns TRUE if the passed in user needs to login to the system in order to RSVP
function check_if_user_needs_login($checkUser) {
    $needsLogin = false;
    global $user;

    // if this user is a full user, and it's not the current user, then we can't allow to use it
    if ($checkUser) {
        $needsLogin = true;

        if ($user) {
            if ($checkUser->uid == $user->uid) {
                $needsLogin = false;
            }
        }

        if (!brick_is_full_user($checkUser)) {
            $needsLogin = false;
        }
    }

    return $needsLogin;
}

function brick_rsvp_ajax($form, $form_state) {
		global $user;

    $eid = $form_state['values']['nid'];
    $mail = $form_state['values']['email'];
    $name = $form_state['values']['name'];
    $note = $form_state['values']['message'];
    $public = $form_state['values']['public'];

    $event_node = node_load($eid);

		if (brick_event_full($event_node)) {
			// Someone else grabbed the last RSVP slot between the time the user 
			// loaded this page and the time they hit the RSVP button. 
			// -- You snooze, you loose!
    	$commands = brick_build_refresh_page_command();
			return $commands;
		}

    if (form_get_errors()) {
	return $form['rsvp'];
    }

    // unfortunately I have to do all the validation in the SUBMIT method so that the form will be rebuilt on every submit, even
    // if validation would fail. This is due to the password and name fields dropping in and out

    if (!valid_email_address($mail)) {
        form_set_error('email', "Invalid email addresss");
    }
 
    if ($mail) {
    	// see if a user with this email already exists
    	$emailUser = user_load_by_mail($mail);
    }

    if ($emailUser && brick_get_rsvp_status($event_node, $emailUser)) {
       form_set_error('name', "You have already RSVPd for this event");
    }
    else {
    	// check if the email user needs to login (you need to provide a password if so)
    	if (check_if_user_needs_login($emailUser)) {
       		if ($form_state['values']['password']) {
	  		require_once DRUPAL_ROOT . '/' . variable_get('password_inc', 'includes/password.inc');
          		if (!user_check_password($form_state['values']['password'], $emailUser)) {
             			form_set_error('password', "Invalid password");
          		}
       		}
       		else {
	  		form_set_error('password', "<b>Looks like you have an account with us!</b> Please provide your password to continue RSVPing");
       		}
    	}
    	else if (!$name) {
		form_set_error('name', 'Please provide a name');
    	}
    }

    if (form_get_errors()) {
       return $form['rsvp'];
    }

    // end validation - begin actual RSVP process
    $loginUser = $user;

    // if a user isnt logged in, we make sure to not use the anonymous user
    if (!user_is_logged_in()) {
        $loginUser = null;
    }

    // you get a brand new user if you changed emails on us...
    if ($loginUser && $loginUser->mail != $mail) {
       $loginUser = null;
    }
 
    if ($emailUser) {
       $loginUser = $emailUser;
    }
    
    if (!$loginUser) {
        // we create a temporary user in guest user mode, and login
        $loginUser = brick_create_guest_account($mail, $name);
    }
    
    // switch the logged in user if that changed
    if ($user->uid != $loginUser->uid) {
        $user = $loginUser;
        user_login_finalize();
    }
    
    brick_add_rsvp($eid, $loginUser->uid, $note, $public);
    //trigger_action('brick_rsvp', $event_node);
    //send_rsvp_emails($event_node, $name, $note);
 
    drupal_set_message(t('Thanks! You have succesfully RSVP\'d for this event.'), 'status');

    $commands = brick_build_refresh_page_command();

    return $commands;
}



/*
 * Send emails to the managers notifying them of an rsvp for this event
 */
function send_rsvp_emails($node, $rsvpname, $note) {
   $managers = brick_get_management_list($node);

   foreach($managers as $mgrId) {
     $mgr = user_load($mgrId);

     $email = $mgr->mail;

     if ($email) {
        $params['event'] = $node;
        $params['rsvpname'] = $rsvpname;
        $params['manager'] = $mgr;
        $params['note'] = $note;

        drupal_mail('brick', 'rsvp', "laughy@@gmail.com", language_default(), $params, "mailer@@onebrick.org");
     }
  }
}

function brick_mail($key, &$message, $params) {
  switch($key) {
     case 'rsvp':
        $variables['@@event'] = $params['event']->title;
        $variables['@@name'] = $params['manager']->field_user_fullname[LANGUAGE_NONE][0]['value'];
        $variables['@@rsvpname'] = $params['rsvpname'];
        $variables['@@note'] = $params['note'];

        $message['subject'] = strtr("@@rsvpname has RSVPd for the event @@event", $variables);
        $message['body'][] = strtr("Hello @@name,\n\n@@rsvpname has RSVPd for the event @@event.\n\nCustom note:\n@@note", $variables);
        break;
  }

}

// Return the number of people who have RSVPed but are not PUBLIC people
//
function brick_private_rsvps($eventid) {
	$q = "SELECT count(field_data_field_rsvp_person.field_rsvp_person_uid) FROM node

	LEFT JOIN field_data_field_rsvp_person ON node.nid = field_data_field_rsvp_person.entity_id AND (field_data_field_rsvp_person.entity_type = 'node' AND field_data_field_rsvp_person.deleted = '0' AND field_data_field_rsvp_person.delta = '0')

	LEFT JOIN  field_data_field_rsvp_event ON node.nid = field_data_field_rsvp_event.entity_id AND (field_data_field_rsvp_event.entity_type = 'node' AND field_data_field_rsvp_event.deleted = '0' AND field_data_field_rsvp_event.delta = '0')

	LEFT JOIN  field_data_field_public ON field_data_field_rsvp_person.field_rsvp_person_uid = field_data_field_public.entity_id AND (field_data_field_public.entity_type = 'user' AND field_data_field_public.deleted = '0')

	WHERE (( (field_data_field_rsvp_event.field_rsvp_event_nid = '".$eventid."' ) )AND(( (node.status = '1') AND (node.type IN  ('rsvp')) AND (field_data_field_public.field_public_value IN  ('0')) )))

	LIMIT 1000 OFFSET 0";

	$r = db_query($q);
	return $r->fetchField();
}

?>
@


1.36
log
@change name pf public flag
@
text
@d2 1
a2 1
// $Id: brick_rsvp.php,v 1.35 2013/08/01 19:26:18 jordan Exp crc $
d30 4
d52 1
a52 1
  WHERE node.status = 1 AND field_rsvp_event_nid = ".$node->nid;
d189 18
@


1.35
log
@*** empty log message ***
@
text
@d2 1
a2 1
// $Id: brick_rsvp.php,v 1.34 2013/07/30 17:31:15 jordan Exp jordan $
d542 1
a542 1
// Return the number of people who have RSVPed but are not PUBLIC_RSVP people
d551 1
a551 1
	LEFT JOIN  field_data_field_user_public_rsvp ON field_data_field_rsvp_person.field_rsvp_person_uid = field_data_field_user_public_rsvp.entity_id AND (field_data_field_user_public_rsvp.entity_type = 'user' AND field_data_field_user_public_rsvp.deleted = '0')
d553 1
a553 1
	WHERE (( (field_data_field_rsvp_event.field_rsvp_event_nid = '".$eventid."' ) )AND(( (node.status = '1') AND (node.type IN  ('rsvp')) AND (field_data_field_user_public_rsvp.field_user_public_rsvp_value IN  ('0')) )))
@


1.34
log
@*** empty log message ***
@
text
@d2 1
a2 1
// $Id: brick_rsvp.php,v 1.33 2013/07/26 22:24:15 jordan Exp jordan $
a219 43
function brick_rsvp_reconcile_form($form, &$form_state, $rsvp_id, $name) {
	$rsvp = node_load($rsvp_id);

	$event_id = $rsvp->field_rsvp_event['und'][0]['nid'];
	$event = node_load($event_id);
	$reconciled = $event->field_reconciled['und'][0]['value'];

	$form['rsvp_rec'] = array(
		'#type' => 'container',
	);

	$form['rsvp_rec']['rsvp_id'] = array(
		'#type' => 'hidden',
		'#name' => 'rsvp_id',
		'#value' => $rsvp_id,
	);

	$attended = brick_rsvp_get_attended($rsvp_id);

	$form['rsvp_rec']['attended'] = array(
		'#type' => 'checkbox',
		'#name' => 'attended',
		'#title' => $name,
		'#default_value' => $attended,
		'#disabled' => $reconciled,
		'#ajax' => array(
			'callback' => 'brick_rsvp_reconcile_ajax',
			'progress' => array(
				'message' => '',
			),
		),
	);

	return $form;
}

function brick_rsvp_reconcile_ajax($form, &$form_state) {
	$rsvp_id = $form_state['values']['rsvp_id'];
	$attended = $form_state['values']['attended'];

	brick_rsvp_set_attended($rsvp_id, $attended);
}

@


1.33
log
@*** empty log message ***
@
text
@d2 1
a2 1
// $Id: brick_rsvp.php,v 1.32 2013/07/26 22:14:06 jordan Exp jordan $
d399 1
a399 1
      	  '#title' => t('A message for the event coordinators (optional):'),
@


1.32
log
@*** empty log message ***
@
text
@d2 1
a2 1
// $Id: brick_rsvp.php,v 1.31 2013/07/26 22:12:07 jordan Exp jordan $
d482 2
a483 11
    // check if the email user needs to login (you need to provide a password if so)
    if (check_if_user_needs_login($emailUser)) {
       if ($form_state['values']['password']) {
	  require_once DRUPAL_ROOT . '/' . variable_get('password_inc', 'includes/password.inc');
          if (!user_check_password($form_state['values']['password'], $emailUser)) {
             form_set_error('password', "Invalid password");
          }
       }
       else {
	  form_set_error('password', "<b>Looks like you have an account with us!</b> Please provide your password to continue RSVPing");
       }
d485 16
a500 2
    else if (!$name) {
	form_set_error('name', 'Please provide a name');
@


1.31
log
@*** empty log message ***
@
text
@d2 1
a2 1
// $Id: brick_rsvp.php,v 1.30 2013/07/26 20:21:31 crc Exp jordan $
d390 1
a390 1
        I have read, and agree to <a href='http:​/​/​siliconvalley.onebrick.org/​documents/​waiver/​' 
@


1.30
log
@*** empty log message ***
@
text
@d2 1
a2 1
// $Id: brick_rsvp.php,v 1.29 2013/06/27 23:47:55 crc Exp crc $
d104 2
a105 2
   remap_rsvp_manager_list($event->nid, $managers, $currentManagers, $currentVolunteers, 'Manager', $idToRSVPId);
   remap_rsvp_manager_list($event->nid, $coordinators, $currentCoordinators, $currentVolunteers, 'Coordinator', $idToRSVPId);
d108 1
a108 1
function remap_rsvp_manager_list($evid, $newList, $oldList, $volunteers, $userType, $idToRSVPId) {
d126 8
d143 10
@


1.29
log
@*** empty log message ***
@
text
@d2 1
a2 1
// $Id: brick_rsvp.php,v 1.28 2013/06/27 21:10:18 jordan Exp $
d72 1
a72 1
		left join field_revision_field_rsvp_attended on field_revision_field_rsvp_attended.entity_id = field_data_field_rsvp_event.entity_id
@


1.28
log
@*** empty log message ***
@
text
@d2 1
a2 1
// $Id: brick_rsvp.php,v 1.27 2013/06/26 05:39:45 jacob Exp jordan $
d50 26
a75 6
/*
  $rsvp_list = db_query($q);
  while($rsvp = $rsvp_list->fetchAssoc()) {
    print_r($rsvp); // debug
  }
*/
@


1.27
log
@Disable checkboxes when reconciled, and also include name.
@
text
@d2 1
a2 1
// $Id: brick_rsvp.php,v 1.26 2013/06/26 04:14:31 jacob Exp jacob $
d97 1
a97 1
      if (in_array($addMe, $volunteers)) {
@


1.26
log
@Add AJAX reconciliation functionality.
@
text
@d2 1
a2 1
// $Id: brick_rsvp.php,v 1.25 2013/06/25 22:39:55 jordan Exp jacob $
d182 7
a188 1
function brick_rsvp_reconcile_form($form, &$form_state, $rsvp_id) {
d204 1
d206 1
@


1.25
log
@*** empty log message ***
@
text
@d2 1
a2 1
// $Id: brick_rsvp.php,v 1.24 2013/06/25 22:39:15 crc Exp jordan $
d171 46
@


1.24
log
@*** empty log message ***
@
text
@d2 1
a2 1
// $Id: brick_rsvp.php,v 1.23 2013/06/02 23:18:54 jordan Exp crc $
d318 1
a318 1
   $form['rsvp']['buttonArea']['submit'] = array(
@


1.23
log
@*** empty log message ***
@
text
@d2 1
a2 1
// $Id: brick_rsvp.php,v 1.22 2013/04/05 23:55:38 crc Exp jordan $
d9 20
d118 1
a118 1
function brick_rsvp_count($node) {
d122 10
a131 1
		WHERE node.status and field_data_field_rsvp_event.field_rsvp_event_nid = ".$node->nid;
d136 1
a136 1
   $c = brick_rsvp_count($node);
@


1.22
log
@*** empty log message ***
@
text
@d2 1
a2 1
// $Id: brick_rsvp.php,v 1.21 2013/03/17 03:19:34 jordan Exp crc $
d85 1
a85 1
      brick_add_rsvp($evid, $addMe, '', $userType, $assigned);
d94 1
a94 1
         brick_add_rsvp($evid, $removeMe, '', 'Volunteer', 'FALSE');
d118 1
a118 1
function brick_add_rsvp($eid, $uid, $note, $role = 'Volunteer', $assigned = '') {
d132 1
d259 8
d333 1
d409 3
a411 3
		brick_add_rsvp($eid, $loginUser->uid, $note);
		//trigger_action('brick_rsvp', $event_node);
		//send_rsvp_emails($event_node, $name, $note);
@


1.21
log
@*** empty log message ***
@
text
@d2 1
a2 1
// $Id: brick_rsvp.php,v 1.20 2013/03/17 00:42:56 jordan Exp jordan $
d98 1
a98 1
function brick_event_full($node) {
d103 2
a104 1
   $c = db_query($q)->fetchField();
d106 5
a110 2
/* debug
  printf("Requested: %s, RSVP Capacity: %s, RSVPed: %s",
d113 1
a113 2
    $c);
*/
@


1.20
log
@*** empty log message ***
@
text
@d2 1
a2 1
// $Id: brick_rsvp.php,v 1.19 2013/02/05 19:38:07 jacob Exp jordan $
d26 3
a28 1
  WHERE field_rsvp_event_nid = ".$node->nid;
d46 1
d57 3
d64 2
a65 2
   remapRsvpList($event->nid, $managers, $currentManagers, 'Manager', $idToRSVPId);
   remapRsvpList($event->nid, $coordinators, $currentCoordinators, 'Coordinator', $idToRSVPId);
d68 3
a70 3
function remapRsvpList($evid, $newList, $oldList, $userType, $idToRSVPId) {
   $toAdd = array_diff($newList, $oldList);
   $toRemove = array_diff($oldList, $newList);
d74 12
a85 1
      brick_add_rsvp($evid, $addMe, '', $userType, NULL);
d88 1
a88 1
   // people we need to remove
d93 2
d157 1
a157 2
   db_update('node') -> fields(array('status' => 0))
    ->condition ('nid', $rsvpId, '=') ->execute();
@


1.19
log
@Support adding automatically-created RSVPs for assigned people.
@
text
@d2 1
a2 1
// $Id: brick_rsvp.php,v 1.18 2012/11/27 04:05:34 jacob Exp jacob $
d15 2
a16 1
    field_revision_field_user_fullname.field_user_fullname_value as fullname
d37 42
d129 1
a129 2
  db_update('node') -> fields(array('status' => 0))
    ->condition ('nid', $rsvpId, '=') ->execute();
d137 5
@


1.18
log
@Rewrite db_inserts as single node_save, which cleans things up and unbreaks opt-ins.
@
text
@d2 1
a2 1
// $Id: brick_rsvp.php,v 1.17 2012/10/06 07:04:18 jordan Exp jacob $
d53 1
a53 1
function brick_add_rsvp($eid, $uid, $note) {
d65 1
a65 1
    $node->field_rsvp_role['und'][0]['value'] = 'Volunteer';
d68 4
d96 9
a104 2
   $r = brick_get_rsvp_query($n->nid, $u->uid);
   return($r->rowCount()>0);
@


1.17
log
@*** empty log message ***
@
text
@d2 1
a2 1
// $Id: brick_rsvp.php,v 1.16 2012/10/03 20:54:31 crc Exp jordan $
d54 16
a69 48
    $rid = db_insert('node') -> fields(array(
    'uid' => $uid,
    'vid' => 999999999, /* temporarily set to something reset in db_update() on next line */
    'created'=>REQUEST_TIME,
    'changed'=>REQUEST_TIME,
    'comment'=>'2',
    'title'=>'new rsvp',
    'language'=>'und',
    'type'=>'rsvp'))->execute();
    
    db_update('node') -> fields(array('vid' => $rid)) 
    ->condition ('nid', $rid, '=') ->execute();
    
    db_insert('field_data_field_rsvp_event') -> fields(array(
    'entity_type'=>'node',
    'bundle'=>'rsvp',
    'entity_id'=>$rid,
    'revision_id'=>$rid,
    'language'=>'und', 
    'delta'=>0, 
    'field_rsvp_event_nid'=>$eid))->execute();
    
    db_insert('field_data_field_rsvp_person') -> fields(array(
    'entity_type'=>'node',
    'bundle'=>'rsvp',
    'entity_id'=>$rid,
    'revision_id'=>$rid,
    'language'=>'und',
    'delta'=>0, 
    'field_rsvp_person_uid'=>$uid))->execute();
    
    db_insert('field_data_field_rsvp_role') -> fields(array(
    'entity_type'=>'node',
    'bundle'=>'rsvp',
    'entity_id'=>$rid,
    'revision_id'=>$rid,
    'language'=>'und',
    'delta'=>0, 
    'field_rsvp_role_value'=>'Volunteer'))->execute();
    
    db_insert('field_data_field_rsvp_note') -> fields(array(
    'entity_type'=>'node',
    'bundle'=>'rsvp',
    'entity_id'=>$rid,
    'revision_id'=>$rid,
    'language'=>'und',
    'delta'=>0, 
    'field_rsvp_note_value'=>$note))->execute();
@


1.16
log
@*** empty log message ***
@
text
@d2 1
a2 1
// $Id: brick_rsvp.php,v 1.15 2012/10/03 19:07:33 crc Exp crc $
d117 2
d355 2
@


1.15
log
@Jordan's changes.
@
text
@d2 1
a2 1
// $Id: brick_rsvp.php,v 1.14 2012/10/02 03:46:55 jordan Exp jordan $
d37 4
a40 1
   $q = "SELECT count(entity_id) FROM field_data_field_rsvp_event where field_rsvp_event_nid = ".$node->nid;
d269 17
a289 2
    global $user;
    
a292 5
    $eid = $form_state['values']['nid'];
    $mail = $form_state['values']['email'];
    $name = $form_state['values']['name'];
    $note = $form_state['values']['message'];
    
d350 4
a353 6
    $node = node_load($eid);
    
    brick_add_rsvp($eid, $loginUser->uid, $note);
    //trigger_action('brick_rsvp', $node);
    //send_rsvp_emails($node, $name, $note);
    
@


1.14
log
@*** empty log message ***
@
text
@d2 1
a2 1
// $Id: brick_rsvp.php,v 1.13 2012/10/02 03:44:35 jordan Exp jordan $
d101 17
d119 6
a124 1
  $r = db_query("SELECT * FROM  field_data_field_rsvp_person 
d127 4
a130 3
  WHERE field_data_field_rsvp_person.field_rsvp_person_uid = $u->uid
  AND field_data_field_rsvp_event.field_rsvp_event_nid = $n->nid");
  return($r->rowCount()>0);
d134 2
a135 1
   return !empty($user) && !in_array('guest_user', array_values($user->roles));
d140 1
a141 1

a142 1
 
d145 12
d158 6
d169 1
a169 1
		'#required' => TRUE,
d172 34
a205 7
    $form['rsvp']['name'] = array(
		'#type' => "textfield",
		'#title' => t('Your Name (so we know what to call you!):'),
		'#size' => 40,
		'#required' => TRUE,
        	'#default_value' => $name
    );
d218 1
a218 1
	  '#rows' => 3,
d228 1
a228 1
	$form['rsvp']['buttonArea']['submit'] = array(
d232 1
a232 1
			'wrapper' => 'RSVPFormWrapper',
d236 1
a236 1
	);
d239 1
a239 1
	return $form;
d242 14
a255 2
function brick_rsvp_form_validate($form, $form_state, $nid) {
    $mail = $form_state['values']['email'];
d257 4
a260 3
    if (!form_get_errors() && !valid_email_address($mail)) {
		form_set_error('email', "Invalid email addresss");
	}
d262 1
d266 3
a268 1
    if (form_get_errors()) return $form;
d272 38
d311 1
a311 1
    
d316 6
a321 10
    
    $eid = $form_state['values']['nid'];
    $mail = $form_state['values']['email'];
    $name = $form_state['values']['name'];
    $note = $form_state['values']['message'];
     
    // see if a user with this email already exists
    $emailUser = user_load_by_mail($mail);
     
    // if this user is a full user, and it's not the current user, then we can't allow to use it
d323 1
a323 18
        $allowedToLogin = false;
    
        if ($user) {
            if ($emailUser->uid == $user->uid) {
                $allowedToLogin = true;
            }
        }
    
        if (!brick_is_full_user($emailUser)) {
            $allowedToLogin = true;
        }
        
        if (!$allowedToLogin) {
            form_set_error('email', t('A user is already using that email.'));
            return $form;
        }
    
        $loginUser = $emailUser;
a325 1
    
d331 2
a332 2
    // log the user in, if they aren't already
    if (!user_is_logged_in()) {
@


1.13
log
@*** empty log message ***
@
text
@d2 1
a2 1
// $Id: brick_rsvp.php,v 1.12 2012/08/14 02:54:23 ubuntu Exp jordan $
a231 1
    /*
a235 1
    */
@


1.12
log
@*** empty log message ***
@
text
@d2 1
a2 1
// $Id: brick_rsvp.php,v 1.11 2012/08/10 04:10:48 jordan Exp $
d232 1
d237 1
@


1.11
log
@*** empty log message ***
@
text
@d2 1
a2 1
// $Id: brick_rsvp.php,v 1.10 2012/07/17 03:11:07 jordan Exp jordan $
d15 1
a15 2
    field_revision_field_user_fname.field_user_fname_value as fname,
    field_revision_field_user_sname.field_user_sname_value as sname
d23 2
a24 4
    left join field_revision_field_user_fname 
      on field_revision_field_rsvp_person.field_rsvp_person_uid=field_revision_field_user_fname.entity_id
    left join field_revision_field_user_sname 
      on field_revision_field_rsvp_person.field_rsvp_person_uid=field_revision_field_user_sname.entity_id
d136 1
a136 1
        	'#default_value' => $name[0] . " " . $name[1]
d276 1
a276 1
        $variables['@@name'] = $params['manager']->field_user_fname[LANGUAGE_NONE][0]['value'];
@


1.10
log
@*** empty log message ***
@
text
@d2 1
a2 1
// $Id: brick_rsvp.php,v 1.9 2012/07/03 03:13:48 ubuntu Exp jordan $
d122 5
a126 1
  
d132 1
a132 1
        	'#default_value' => $user ? $user->mail : ""
@


1.9
log
@*** empty log message ***
@
text
@d2 1
a2 1
// $Id: brick_rsvp.php,v 1.8 2012/02/29 08:09:46 jordan Exp ubuntu $
d119 1
d121 1
a121 1
    $name = brick_get_user_name($user);
d123 1
a123 1
	$form['rsvp']['email'] = array(
d128 2
a129 2
        '#default_value' => $user ? $user->name : ""
	);
d135 2
a136 2
        '#default_value' => $name[0] . $name[1]
	);
d144 1
a144 1
	);
d147 2
a148 2
      '#type' => "textarea",
      '#title' => t('A message for the event coordinators (optional):'),
@


1.8
log
@clive checked this in for jordan
@
text
@d1 304
a304 226
<?php
// $Id: brick_rsvp.php,v 1.7 2012/02/08 06:16:36 jordan Exp jordan $

/**
 * @@file
 *
 * A module that contains utility functions used across the One Brick website.
 */
function brick_get_rsvp_list($node) {
  $q = "
  SELECT DISTINCT
    field_revision_field_rsvp_person.field_rsvp_person_uid as uid,
    field_revision_field_rsvp_role.field_rsvp_role_value as role,
    users.mail,
    field_revision_field_user_fname.field_user_fname_value as fname,
    field_revision_field_user_sname.field_user_sname_value as sname
  FROM field_revision_field_rsvp_event
    left join field_revision_field_rsvp_person
      on field_revision_field_rsvp_event.entity_id=field_revision_field_rsvp_person.entity_id
    left join field_revision_field_rsvp_role
      on field_revision_field_rsvp_event.entity_id=field_revision_field_rsvp_role.entity_id
    left join users
      on field_revision_field_rsvp_person.field_rsvp_person_uid=users.uid
    left join field_revision_field_user_fname 
      on field_revision_field_rsvp_person.field_rsvp_person_uid=field_revision_field_user_fname.entity_id
    left join field_revision_field_user_sname 
      on field_revision_field_rsvp_person.field_rsvp_person_uid=field_revision_field_user_sname.entity_id
  WHERE field_rsvp_event_nid = ".$node->nid;

/*
  $rsvp_list = db_query($q);
  while($rsvp = $rsvp_list->fetchAssoc()) {
    print_r($rsvp); // debug
  }
*/
  return(db_query($q));
}

function brick_event_full($node) {
   $q = "SELECT count(entity_id) FROM field_data_field_rsvp_event where field_rsvp_event_nid = ".$node->nid;
   $c = db_query($q)->fetchField();

/* debug
  printf("Requested: %s, RSVP Capacity: %s, RSVPed: %s",
    $node->field_event_requested['und'][0]['value'],
    $node->field_event_max_rsvp_capacity['und'][0]['value'],
    $c);
*/

  return($c >= $node->field_event_max_rsvp_capacity['und'][0]['value']);
}

function brick_add_rsvp($eid, $uid, $note) {
$rid = db_insert('node') -> fields(array(
  'uid' => $uid,
  'vid' => 999999999, /* temporarily set to something reset in db_update() on next line */
  'created'=>REQUEST_TIME,
  'changed'=>REQUEST_TIME,
  'comment'=>'2',
  'title'=>'new rsvp',
  'language'=>'und',
  'type'=>'rsvp'))->execute();

db_update('node') -> fields(array('vid' => $rid)) 
->condition ('nid', $rid, '=') ->execute();

db_insert('field_data_field_rsvp_event') -> fields(array(
  'entity_type'=>'node',
  'bundle'=>'rsvp',
  'entity_id'=>$rid,
  'revision_id'=>$rid,
  'language'=>'und', 
  'delta'=>0, 
  'field_rsvp_event_nid'=>$eid))->execute();

db_insert('field_data_field_rsvp_person') -> fields(array(
  'entity_type'=>'node',
  'bundle'=>'rsvp',
  'entity_id'=>$rid,
  'revision_id'=>$rid,
  'language'=>'und',
  'delta'=>0, 
  'field_rsvp_person_uid'=>$uid))->execute();

db_insert('field_data_field_rsvp_role') -> fields(array(
  'entity_type'=>'node',
  'bundle'=>'rsvp',
  'entity_id'=>$rid,
  'revision_id'=>$rid,
  'language'=>'und',
  'delta'=>0, 
  'field_rsvp_role_value'=>'Volunteer'))->execute();

db_insert('field_data_field_rsvp_note') -> fields(array(
  'entity_type'=>'node',
  'bundle'=>'rsvp',
  'entity_id'=>$rid,
  'revision_id'=>$rid,
  'language'=>'und',
  'delta'=>0, 
  'field_rsvp_note_value'=>$note))->execute();
}

function brick_get_rsvp_status($n, $u) {
  $r = db_query("SELECT * FROM  field_data_field_rsvp_person 
  LEFT JOIN field_data_field_rsvp_event ON field_data_field_rsvp_person.entity_id
     = field_data_field_rsvp_event.entity_id
  WHERE field_data_field_rsvp_person.field_rsvp_person_uid = $u->uid
  AND field_data_field_rsvp_event.field_rsvp_event_nid = $n->nid");
  return($r->rowCount()>0);
}

function brick_is_full_user($user) {
   return !empty($user) && !in_array('guest_user', array_values($user->roles));
}

function brick_dorsvp() {
  global $user;

  $loginUser = $user;

  // if a user isnt logged in, we make sure to not use the anonymous user
  if (!user_is_logged_in()) {
    $loginUser = null;
  }

  $eid = $_GET['nid'];
  $mail = $_GET['email'];
  $name = $_GET['name'];
  $note = $_GET['rsvpNote'];

  if (!$name) {
     drupal_json_output(array('status' => 0, 'message' => "Please enter a names"));
     return;
  }

  // verify the user put in a valid email
  if (!valid_email_address($mail)) {
      drupal_json_output(array('status' => 0, 'message' => "Invalid email addresss"));
      return;
  }

  // see if a user with this email already exists
  $emailUser = user_load_by_mail($mail);


  // if this user is a full user, and it's not the current user, then we can't allow to use it
  if ($emailUser) {
     $allowedToLogin = false;

     if ($user) {
       if ($emailUser->uid == $user->uid) {
          $allowedToLogin = true;
       }
     }
     if (!brick_is_full_user($emailUser)) {
        $allowedToLogin = true;
     }

     if (!$allowedToLogin) {
       drupal_json_output(array('status' => 0, 'message' => "A user is already using that email."));
       return;
     }

     $loginUser = $emailUser;
  }


  if (!$loginUser) {
     // we create a temporary user in guest user mode, and login
     $loginUser = brick_create_guest_account($mail, $name);
  }

  // log the user in, if they aren't already
  if (!user_is_logged_in()) {
	$user = $loginUser;
     	user_login_finalize();
  }

  $node = node_load($eid);

  brick_add_rsvp($eid, $loginUser->uid, $note);
  //trigger_action('brick_rsvp', $node);
  //send_rsvp_emails($node, $name, $note);

  drupal_json_output(array('status' => 1));
}

/*
 * Send emails to the managers notifying them of an rsvp for this event
 */
function send_rsvp_emails($node, $rsvpname, $note) {
   $managers = brick_get_management_list($node);

   foreach($managers as $mgrId) {
     $mgr = user_load($mgrId);

     $email = $mgr->mail;

     if ($email) {
        $params['event'] = $node;
        $params['rsvpname'] = $rsvpname;
        $params['manager'] = $mgr;
        $params['note'] = $note;

        drupal_mail('brick', 'rsvp', "laughy@@gmail.com", language_default(), $params, "mailer@@onebrick.org");
     }
  }
}

function brick_mail($key, &$message, $params) {
  switch($key) {
     case 'rsvp':
        $variables['@@event'] = $params['event']->title;
        $variables['@@name'] = $params['manager']->field_user_fname[LANGUAGE_NONE][0]['value'];
        $variables['@@rsvpname'] = $params['rsvpname'];
        $variables['@@note'] = $params['note'];

        $message['subject'] = strtr("@@rsvpname has RSVPd for the event @@event", $variables);
        $message['body'][] = strtr("Hello @@name,\n\n@@rsvpname has RSVPd for the event @@event.\n\nCustom note:\n@@note", $variables);
        break;
  }

}

?>
@


1.7
log
@*** empty log message ***
@
text
@d2 1
a2 1
// $Id: brick_rsvp.php,v 1.6 2012/02/02 02:01:25 jordan Exp jordan $
d114 1
a114 1
   return $user && !in_array('guest user', array_values($user->roles));
@


1.6
log
@fix rsvp issue (method missing).
@
text
@d2 1
a2 1
// $Id: brick_rsvp.php,v 1.5 2012/01/27 02:00:13 crc Exp jordan $
d114 1
a114 1
   return !in_array('guest user', array_values($user->roles));
@


1.5
log
@*** empty log message ***
@
text
@d2 1
a2 1
// $Id: brick_rsvp.php,v 1.4 2012/01/25 05:57:24 crc Exp crc $
d113 3
d133 1
a133 1
     drupal_json_output(array('status' => 0, 'message' => "Please enter a name"));
d139 1
a139 1
      drupal_json_output(array('status' => 0, 'message' => "Invalid email address"));
d146 1
d168 1
d183 2
a184 2
  trigger_action('brick_rsvp', $node);
  send_rsvp_emails($node, $name, $note);
@


1.4
log
@jordans changes.
@
text
@d2 1
a2 1
// $Id: brick_rsvp.php,v 1.3 2012/01/25 03:20:57 crc Exp $
d30 1
a30 1
  /*
@


1.3
log
@*** empty log message ***
@
text
@d2 1
a2 1
// $Id: brick_rsvp.php,v 1.2 2012/01/25 02:10:55 crc Exp crc $
a112 11
function brick_load_chapters() {
	$q = "
		SELECT nid, title from node 
			left join field_data_field_chapter_hide_from_menu on field_data_field_chapter_hide_from_menu.entity_id = nid 
		WHERE type = 'chapter' and status = 1 and
			field_data_field_chapter_hide_from_menu.deleted = 0 and
			field_data_field_chapter_hide_from_menu.field_chapter_hide_from_menu_value != 1;
	";
   $r = db_query($q);
   return $r;            
}
d114 1
a114 1
function brick_dorsvp($eid) {
d116 59
a174 1
  $note = "not set";
d177 1
a177 1
  brick_add_rsvp($eid, $user->uid, $note);
d179 39
a218 1
  drupal_goto('node/' . $eid);
d221 1
@


1.2
log
@*** empty log message ***
@
text
@d2 1
a2 1
// $Id: brick_rsvp.php,v 1.1 2012/01/25 02:00:55 root Exp crc $
d124 12
@


1.1
log
@Initial revision
@
text
@d2 1
a2 126
// $Id$

function brick_colorbox_form_access() {
   return TRUE;
}

function brick_login_form($form_state) {
  $form = array();
  $form['existing'] = array(
    '#type' => 'container',
    '#attributes' => array(
       'class' => array(
         'existing-area'
       ),
    ),
  );

  $form['existing']['intro'] = array(
    '#markup' => 'Login with your OneBrick email and password'
  );
  
  $form['existing']['emailexist'] = array(
    '#size' => '35',
    '#weight' => '0',
    '#type' => 'textfield',
    '#title' => t('Email'),
    '#default_value' => '',
  );

  $form['existing']['pass'] = array(
    '#size' => '35',
    '#type' => 'password',
    '#title' => t('Password')
  );

  $form['guest'] = array(
    '#type' => 'container',
    '#attributes' => array(
       'class' => array(
         'guest-area'
        ),
     ),
  );

  $form['guest']['intro'] = array(
    '#markup' => 'If you would like to use this site as a guest instead, please enter your email so we can contact you',
  );

  $form['guest']['email'] = array(
    '#size' => '35',
    '#type' => 'textfield',
    '#title' => t('Guest Email'),
  );

  $form['guest']['name'] = array(
    '#size' => '35',
    '#type' => 'textfield',
    '#title' => t('Your Full Name')
  );

  $form['existing']['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Login',
    '#submit' => array('brick_login_existing')
  );

  $form['guest']['submit'] = array(
    '#type' => 'submit',
    '#value' => 'RSVP as guest',
    '#submit' => array('brick_login_guest')
  );

  return $form;
}

function brick_login_guest($form, &$form_state) {
   $emailAddr = $form_state['values']['email'];

   $currUser = user_load_by_mail($emailAddr);
   
   if ($currUser) {
   }
   else {
      $newUser = new StdClass();
      $newUser->is_new = TRUE;
      $newUser->status = TRUE;
      $newUser->field_user_fname[LANGUAGE_NONE][0]['value'] = 'Jordan';
      $newUser->field_user_sname[LANGUAGE_NONE][0]['value'] = 'Laughlin';
      $newUser->name = $emailAddr;
      $newUser->pass = 'guest';
      $newUser->mail = $emailAddr;
      $newUser->status = 1;
      $newUser->init = $emailAddr;
      user_save($newUser);

      $currUser = $newUser;
   }

   drupal_goto($currUser->uid);
}

function brick_login_existing($form, &$form_state) {
   global $user;

   // try to load by email first, and then by username
   $newuser = user_load_by_mail($form_state['values']['emailexist']);
   if (!$newuser) {
      $newuser = user_load_by_name($form_state['values']['emailexist']);
   }

   require_once DRUPAL_ROOT . '/' . variable_get('password_inc', 'includes/password.inc');
   if ($newuser && user_check_password($form_state['values']['pass'], $newuser)) {
      $user = $newuser;

      user_login_finalize();

      drupal_goto('success');
   }
   else {
      drupal_goto('fail');
   }
}

function brick_get_login_form() {
   return drupal_get_form('brick_login_form');
}  
a38 11
function brick_1b_email($uid) {
  $q = "
  SELECT field_staff_email_value FROM field_revision_field_staff_person
  JOIN field_revision_field_staff_email
  on field_revision_field_staff_person.entity_id=field_revision_field_staff_email.entity_id
  WHERE field_staff_person_uid=$uid;";

  $c = db_query($q)->fetchField();
  return($c);
}

a52 9

function brick_event_start($node) {
  return(strtotime($node->field_event_date['und'][0]['value']));
}

function brick_event_open_date($node) {
  return(strtotime($node->field_event_rsvp_date['und'][0]['value']));
}

a123 311

function brick_chapter_header() {
 //$_SESSION['HEADER'] = 'header-sv.png'; // debug
 return(file_create_url(file_build_uri($_SESSION['HEADER'])));
}

function brick_menu() {
  $items['node/%/rsvp'] = array(
    'page callback' => 'brick_dorsvp',
    'page arguments' => array(1),
    'access callback' => 'brick_access',
    'access arguments' => array(1),
  );

  $items['node/%/add'] = array(
      'title' => 'Add',
      'page callback' => 'brick_add_node',
      'page arguments' => array(1),
      'access callback' => 'brick_access', 
      'weight' => 10,
      'type' => MENU_LOCAL_TASK
  );


  $items['node/%/copy'] = array(
      'title' => 'Copy',
      'page callback' => 'brick_copy_node',
      'page arguments' => array(1),
      'access callback' => 'brick_access', 
      'weight' => 20,
      'type' => MENU_LOCAL_TASK
  );


  $items["node/%/promote"] = array(
      'title' => 'Promote',
      'page callback' => 'brick_promote',
      'page arguments' => array(1),
      'access callback' => 'brick_access', 
      'weight' => 20,
      'type' => MENU_LOCAL_TASK
  );

  $chapterdata = brick_load_chapters();
 
  $items['chapters'] = array(
     'title' => 'Chapters',
     'page callback' => 'brick_switch_chapter',
     'page arguments' => array(1),
     'access callback' => 'brick_access',
     'weight' => -50,
     'menu_name' => 'main-menu',
     'expanded' => TRUE,
     'type' => MENU_NORMAL_ITEM
  );   


  while($chapter = $chapterdata->fetchAssoc()) {
    $items['chapters/' . $chapter['nid']] = array(
          'title' => $chapter['title'],
          'page callback' => 'brick_switch_chapter',
          'page arguments' => array(1, $chapter['nid']),
          'access callback' => 'brick_access',
          'weight' => 0,
          'tab_parent' => 'chapters',
          'menu_name' => 'main-menu',
          'type' => MENU_NORMAL_ITEM
     );
  }

  return $items;
}

function brick_switch_chapter($nid) {
  brick_set_chapter_globals($nid);

  // return to the same page that switched the chapter
  drupal_goto($_SERVER["HTTP_REFERER"]);
}

/*
 * resets the SESSION variables to the users "home" chapter
 * if $user is not set then they are not logged in and set set the value to the first chapter (SF)
 */
function brick_load_current_user_chapter() {
   global $user;
   
   $chapter_nid = 101; // default to chapter 101 - San Francisco

   if ($user) {
     $loadedUser = user_load($user->uid);

     if ($loadedUser->field_user_chapter) {
        $chapter_nid = $loadedUser->field_user_chapter['und'][0]['nid'];
     }
   }
   brick_set_chapter_globals($chapter_nid);
}

function brick_set_chapter_globals($chapter_nid) {
  $_SESSION['CHAPTER'] = $chapter_nid;
  $_SESSION['HEADER'] = 'header-sv.png'; // debug

  $q = "SELECT field_chapter_craigslist_stub_value
	  FROM field_data_field_chapter_craigslist_stub
	  WHERE entity_id =$chapter_nid";
  $_SESSION['CRAIGSLIST'] = db_query($q)->fetchField();

  $q = "SELECT field_chapter_twitter_url_value
	  FROM field_data_field_chapter_twitter_url
	  WHERE entity_id =$chapter_nid";
  $_SESSION['TWITTER'] = db_query($q)->fetchField();

  $q = "SELECT field_chapter_facebook_url_value 
	  FROM field_data_field_chapter_facebook_url
	  WHERE entity_id = $chapter_nid";
  $_SESSION['FACEBOOK'] = db_query($q)->fetchField();

  $q = "SELECT filename
	  FROM file_managed
	  JOIN field_data_field_chapter_header_image ON file_managed.fid = field_chapter_header_image_fid
	  WHERE  entity_id = $chapter_nid";
  $_SESSION['HEADER'] = db_query($q)->fetchField();

}

function brick_user_login() {
   brick_load_current_user_chapter();
}

/* 
 * Returns the current chapter.
 * This is normally stored in $_SESSION.  
 * If it is not set then we initialize $_SESSION from the users account.
 */
function brick_current_chapter() {
	if ($_SESSION && array_key_exists('CHAPTER', $_SESSION)) {
		// do nothing, we already have a chapter set
	} else {
   		brick_load_current_user_chapter(); // set the $_SESSION variables from the user account.
	}
	return ($_SESSION['CHAPTER']);
}

function brick_add_node($nid) {
  $node = node_load($nid);
  drupal_goto('node/add/'.$node->type);
}

function brick_copy_node($nid) {
  global $user;
  $node = node_load($nid);

  $node->nid = NULL;
  $node->vid = NULL;
  $node->tnid = NULL;
  $node->name = $user->name;
  $node->uid = $user->uid;
  $node->created = NULL;
  $node->path = NULL;
  $node->files = array();
  node_save($node);
  drupal_goto('node/'.$node->nid.'/edit');
}


function brick_trigger_info() {
  return array(
    'rsvp' => array(
      'brick_rsvp' => array(
        'label' => t('After the user RSVPs for an event'),
      ), 
      'brick_unrsvp' => array(
        'label' => t('After the user Un-RSVPs for an event'),
      ), 
    ),
  );
}

function trigger_action($name, $node, $options = array()) {
  $aids = trigger_get_assigned_actions($name);
  $context = array(
    'node' => $node,
    'title' => $node->title,
    'nid' => $node->nid,
    'body' => 'I just signed up for $node->field_title',
    'hook' => $name
  );
  actions_do(array_keys($aids), (object) $node, $context);
}

function brick_dorsvp($eid) {
  global $user;
  $note = "not set";
  $node = node_load($eid);

  brick_add_rsvp($eid, $user->uid, $note);
  trigger_action('brick_rsvp', $node);

  drupal_goto('node/' . $eid);
}

function brick_access() {
  return true;
}


function brick_safe_mailto($email, $subject, $show = "(email)") {
  $link = 'mailto:' . $email;
  $obfuscatedLink = "";
  for ($i=0; $i<strlen($link); $i++) {
    $obfuscatedLink .= "&#" . ord($link[$i]) . ";";
  }
  $result = "<a href=\" $obfuscatedLink";
  if (isset($subject)) {
    $result .= "?subject=$subject";
  }
  $result .= "\">$show</a>";
  return($result);
}

/**
 * $node is an event note. 
 *
 */
function brick_format_managment_list($node) {
  
  $result = "";
	
	$rsvp_list = brick_get_rsvp_list($node);
	$first_manager = true;
	while($rsvp = $rsvp_list->fetchAssoc()) {
		if($rsvp['role'] == "Manager") {
			if ($first_manager) {
				$first_manager = false;
				$result .= "Manager: ";
			}
			else {
				$result .= ", ";
			}
			$result .= $rsvp['fname']." ";
      if ($email = brick_1b_email($rsvp['uid'])) {
			  $result .= brick_safe_mailto($email, $node->title);
      }
		}
	}

	$rsvp_list = brick_get_rsvp_list($node);
	$first_coordinator = true;
	while($rsvp = $rsvp_list->fetchAssoc()) {
		if($rsvp['role'] == "Coordinator") {
			if ($first_coordinator) {
				$first_coordinator = false;
				if(!$first_manager) {
					$result .= "; ";
				}
				$result .= "Coordinator: ";
			}
			else {
				$result .= ", ";
			}
			$result .= $rsvp['fname']." ";
      if ($email = brick_1b_email($rsvp['uid'])) {
			  $result .= brick_safe_mailto($email, $node->title);
      }
		}
  }

  return($result);
}


function brick_theme() {
  $theme_functions = array();

  // Formatter theming functions.
  $formatters = array(
    'brick_item_count',
  );

  foreach ($formatters as $formatter) {
    $theme_functions[$formatter] = array(
      'arguments' => array('field' => NULL),
    );
  }
 
  return $theme_functions;
}

function brick_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
   $element = array();
   $element[0]['#markup'] = "<span class='count'>".sizeof($items)."</span>";
   return $element;
}

function brick_field_formatter_info() {
    return array(
    'brick_item_count' => array(
      'label' => t('Image Count'),
      'field types' => array('image'),
    ),
  );
}

function brick_boot () {
 if(empty($_SESSION['HEADER'])) {
    brick_set_chapter_globals(101);// The first time someone visits the site we set them to the SF chapter.
  }
}

?>
@
