head	1.25;
access;
symbols;
locks
	crc:1.25; strict;
comment	@# @;


1.25
date	2013.12.18.03.09.17;	author jordan;	state Exp;
branches;
next	1.24;

1.24
date	2013.10.03.22.24.33;	author crc;	state Exp;
branches;
next	1.23;

1.23
date	2013.08.01.20.41.42;	author crc;	state Exp;
branches;
next	1.22;

1.22
date	2013.08.01.18.46.02;	author crc;	state Exp;
branches;
next	1.21;

1.21
date	2013.07.30.20.38.16;	author jordan;	state Exp;
branches;
next	1.20;

1.20
date	2013.07.30.17.31.00;	author jordan;	state Exp;
branches;
next	1.19;

1.19
date	2013.07.26.22.58.15;	author jordan;	state Exp;
branches;
next	1.18;

1.18
date	2013.07.26.22.50.32;	author jordan;	state Exp;
branches;
next	1.17;

1.17
date	2013.06.27.23.44.14;	author jordan;	state Exp;
branches;
next	1.16;

1.16
date	2013.06.25.22.38.25;	author jordan;	state Exp;
branches;
next	1.15;

1.15
date	2013.01.27.02.44.49;	author jordan;	state Exp;
branches;
next	1.14;

1.14
date	2012.10.06.07.04.34;	author jordan;	state Exp;
branches;
next	1.13;

1.13
date	2012.09.25.06.53.24;	author jordan;	state Exp;
branches;
next	1.12;

1.12
date	2012.09.18.04.44.46;	author jordan;	state Exp;
branches;
next	1.11;

1.11
date	2012.08.14.02.54.23;	author ubuntu;	state Exp;
branches;
next	1.10;

1.10
date	2012.08.08.05.10.12;	author jordan;	state Exp;
branches;
next	1.9;

1.9
date	2012.07.17.03.10.54;	author jordan;	state Exp;
branches;
next	1.8;

1.8
date	2012.07.03.03.07.45;	author jordan;	state Exp;
branches;
next	1.7;

1.7
date	2012.05.16.01.24.18;	author jordan;	state Exp;
branches;
next	1.6;

1.6
date	2012.03.07.05.01.35;	author jordan;	state Exp;
branches;
next	1.5;

1.5
date	2012.02.21.09.46.58;	author jordan;	state Exp;
branches;
next	1.4;

1.4
date	2012.02.08.06.16.52;	author jordan;	state Exp;
branches;
next	1.3;

1.3
date	2012.01.25.05.53.24;	author crc;	state Exp;
branches;
next	1.2;

1.2
date	2012.01.25.02.12.14;	author crc;	state Exp;
branches;
next	1.1;

1.1
date	2012.01.25.02.00.55;	author root;	state Exp;
branches;
next	;


desc
@@


1.25
log
@*** empty log message ***
@
text
@<?php
// $Id: brick_login.php,v 1.24 2013/10/03 22:24:33 crc Exp jordan $

function brick_colorbox_form_access() {
	return TRUE;
}

function brick_create_guest_account($emailAddr, $name) {
   $roles = user_roles();

   $newUser = new StdClass();
   $newUser->is_new = TRUE;
   $newUser->status = TRUE;
   $newUser->field_user_fullname[LANGUAGE_NONE][0]['value'] = $name;
   $newUser->name = $emailAddr;
   $newUser->pass = 'OneBrick';
   $newUser->mail = $emailAddr;
   $newUser->status = 1;
   $newUser->timezone = "America/New_York";
   $newUser->roles = array(array_search('guest_user', $roles) => 'guest_user');
   $newUser->init = $emailAddr;
   user_save($newUser);

   return $newUser;
}

function load_user($mail) {
  $account = user_load_by_mail($mail);
  if (!$account) {
     $account = user_load_by_name($mail);
  }
  return $account;
}

function brick_create_account($form, $form_state) {
   if (form_get_errors()) return $form;

   global $user;
   $account = null;

   $uid = $form_state['values']['uid'];
   $pass = $form_state['values']['pw'];
   $fullname = $form_state['values']['fullname'];
   $chapter = $form_state['values']['chapters'];
   $newsletter = $form_state['values']['newsletter']; 
   $mail = $form_state['values']['username'];
   // an admin is creating this user
   $isAdmin = $form_state['values']['is_admin'] == "YES";

   if (empty($newsletter)) {
      $newsletter = 0;
   }

   $update = array();
   
   if (!empty($uid)) {
       // user that already exists, carried over from signin screen
       $account = user_load($uid);
   }
   else {
      // check to see if this is a user with no password (old user)
      $account = load_user($mail);
   }

   if (!$acccount) {
       // brand new user
       $update['name'] = $mail;
       $update['mail'] = $mail; 
       $update['init'] = $mail;
   }
   
   $update['field_user_fullname'][LANGUAGE_NONE][0]['value'] = $fullname;
   $update['pass'] = $pass;
   $update['roles'] = array(DRUPAL_AUTHENTICATED_RID => true);
   $update['status'] = 0;
   $update['timezone'] = "America/Los_Angeles";
   $update['field_user_chapter']['und'][0]['nid'] = $chapter; 

   watchdog("Info", "Saving new user 2");
    
   $createdUser = user_save($account, $update);
 
   // if the user themselves added an account, we switch their user variable here
   if (!$isAdmin) {
      $user = $createdUser;
   }

   if (!empty($createdUser->uid)) {
        db_update('field_data_field_user_chapter') 
            ->fields(array('field_user_chapter_nid'=>$chapter))
            ->condition('entity_id', $createdUser->uid, '=')
            ->execute();
        db_update('field_data_field_user_subscribed') 
            ->fields(array('field_user_subscribed_value'=>$newsletter))
            ->condition('entity_id', $createdUser->uid, '=')
            ->execute();
   }

   //watchdog("Info", "Logging in User");

   //user_login_finalize();
   
   //send approval email
   //_user_mail_notify('register_no_approval_required', $user);

   // requires user_verify module: send a user verification email
   $udata->uid = $createdUser->uid;
   drupal_write_record('user_verify', $udata); 
   _user_verify_send_code($udata);
   
   if ($isAdmin) {
     drupal_set_message("Account created. The user will need to verify the account before it can be used.");
     $commands = brick_build_refresh_page_command(); 
   }
   else {
     $commands = brick_move_to_new_cbox_form("Thanks for signing up!", drupal_render(drupal_get_form('brick_thankyou_form')), "#formWrapper");
   }

   return $commands;
}

function brick_user_insert(&$edit, $account, $category) {
   update_user_name($edit['field_user_fullname'][LANGUAGE_NONE][0]['value'], $account->uid);
}

function update_user_name($name, $uid) {
   watchdog('brick', $name . '_' . $uid); 
   db_update('users')
            ->fields(array('name'=>$name . '_' . $uid))
            ->condition('uid', $uid, '=')
            ->execute();

}

function brick_thankyou_form($form, $form_state) {
	$form['thanks']['intro'] = array(
                '#markup' => '<div class="thankYouMessage">Please check your email to activate your account.</div>',
        );

  
        return $form;
}

function brick_forgotpw() {
   return brick_move_to_new_cbox_form("Reset Password", drupal_render(drupal_get_form('brick_forgot_pw_form', $_POST['username'])), "#formWrapper");
}

function brick_signup() {
   return brick_move_to_new_cbox_form("Create Account", drupal_render(drupal_get_form('brick_create_account_form', NULL, $_POST['username'])), "#formWrapper");  
}

/** Meant to be called by an ajax request **/
function brick_signup_form_direct() {
   print drupal_render(drupal_get_form('brick_create_account_form'));
}

function brick_create_account_form($form, $form_state, $uid = NULL, $username = NULL) {
    	$loadedUser = null;
	$name = "";
	$isGuestUser = false;
    
    	if (!empty($username)) {
           $loadedUser = load_user($username);       
	   if ($loadedUser && !brick_is_full_user($loadedUser)) {
	      $name = brick_get_user_name($loadedUser);
	      $isGuestUser = true;
	   }
	}

	// if this isn't a full user, show them a message
	if ($isGuestUser) {
		if ($loadedUser->field_copied_over[LANGUAGE_NONE][0]['value'] == TRUE) {
			$form['create']['message'] = array(
      				'#markup' => "<div class='messages status'><b>We've recently updated our system!</b> Please provide a new password to login. Sorry for the inconvienence!</div>"
			);
		}
		else {
			$form['create']['message'] = array(
                                '#markup' => "<div class='messages status'><b>Welcome Back!</b> Please provide a password to continue logging in with</div>"
                        );
		}
	}

	$form['create']['username'] = array(
                '#type' => "textfield",
                '#title' => t("Email:"),
                '#size' => 40,
                '#required' => TRUE,
                '#default_value' => $username
        );
    
	$form['create']['pw'] = array(
		'#type' => "password",
		'#title' => t('Password:'),
		'#size' => 40,
		'#required' => TRUE,
	);

	$form['create']['pwconf'] = array(
		'#type' => "password",
		'#title' => t('Password Again:'),
		'#size' => 40,
		'#required' => TRUE,
	);

	$form['create']['fullname'] = array(
		'#type' => "textfield",
		'#title' => t("Your name:"),
		'#default_value' => $name,
		'#size' => 40,
		'#required' => TRUE
	);

	$chapters = variable_get('brick_chapters');
	$chapterMap;

	foreach ($chapters as $chapter) {
		$chapterMap[$chapter['nid']] = $chapter['title'];
	}

	$form['create']['chapters'] = array(
		'#type' => "select",
		'#options' => $chapterMap,
		'#title' => t('Default chapter:'),
		'#default_value' => brick_current_chapter()
	);

	$form['create']['newsletter'] = array(
		'#type' => 'checkbox',
		'#title' => t('Join the One Brick mailing list'),
		'#default_value' => TRUE,
		'#title_display' => 'after'
	);

	$form['create']['uid'] = array(
		'#type' => 'hidden',
		'#value' => $uid,
		'#default_value' => $uid
	);

        $form['create']['is_admin'] = array(
                '#type' => 'hidden',
                '#default_value' => '',
		'#attributes' => array(
                        'id' => 'isAdminSubmit'
                )
        );

	$form['create']['createButtonArea'] = array(
		'#type' => "container",
		'#attributes' => array(
			'id' => 'createButtonArea'
		)
	);

	$form['create']['createButtonArea']['submitCreate'] = array(
		'#type' => "button",
		'#button_type' => 'button',
		'#value' => t('Create Account'),
		'#ajax' => array(
			'wrapper' => 'formWrapper',
			'callback' => 'brick_create_account',
			'method' => 'html'
		)
	);

	$form['create']['createButtonArea']['loginFeedback'] = array(
		'#markup' => "<span id='loginFeedback'></span>"
	);

	return $form;  
}

function brick_create_account_form_validate($form, $form_state) {
	if (!form_get_errors()) {
                $mail = $form_state['values']['username'];
                $loadedUser = load_user($mail);
                if ($loadedUser && $loadedUser->status && brick_is_full_user($loadedUser)) {
                	form_set_error('username', "Email is already in use");
              	}
		if ($form_state['values']['pw'] != $form_state['values']['pwconf']) {
                        form_set_error('pwconf', "Password fields don't match");
                }
	}
}

function brick_forgot_pw_form($form, $form_state, $username) {
	$form['pwWrapper'] = array(
		'#type' => "container",
		'#attributes' => array(
			'id' => "pwWrap"
		)
	);
	$form['pwWrapper']['emailHeader'] = array(
        	'#markup' => "<h3 class='loginHeader'>Email Address</h3>"
    	);
    	$form['pwWrapper']['emailSection'] = array(
        	'#type' => "container"
    	);
    	$form['pwWrapper']['emailSection']['username'] = array(
        	'#type' => "textfield",
        	'#title' => t('Email:'),
        	'#size' => 40,
        	'#required' => TRUE,
		'#default_value' => "$username"
    	);
	$form['pwWrapper']['emailSection']['submitButton'] = array(
        	'#type' => "button",
                '#value' => t('Send Password Reset Email'),
                '#ajax' => array(
                        'wrapper' => 'pwWrap',
                        'callback' => 'brick_forgot_pw_submit',
                        'method' => 'html',
                        'event' => 'click'
                )
	);
	
	return $form;
}

function brick_forgot_pw_form_validate($form, $form_state) {
   	if (!form_get_errors()) {
                $mail = $form_state['values']['username'];
                $loadedUser = load_user($mail);
                if (!$loadedUser) {
                        form_set_error('username', "Could not find a user with that email address");
                }
        }
}


function brick_forgot_pw_submit($form, $form_state) {
    if (form_get_errors()) return $form['pwWrapper'];

    $mail = $form_state['values']['username'];
    $account = load_user($mail);
    $params['account'] = $account;
    $language = user_preferred_language($account);
    $mail = drupal_mail('user', 'password_reset', $account->mail, $language, $params);

    return brick_move_to_new_cbox_form("Reset Password", drupal_render(drupal_get_form('brick_pw_reset_sent_form', $form_state['values']['username'])));
}

function brick_pass_reset($form, &$form_state, $uid, $timestamp, $hashed_pass, $action = NULL) {
  $user = user_load($uid);
  $error = true;

  if ($user) {
     $rehash = user_pass_rehash($user->pass, $timestamp, $user->login);
     if ($hashed_pass == $rehash) {
       $error = false;
     }
  }

  if ($error) {
     drupal_set_message("Reset password link is invalid or has expired.", 'error');
     return;
  }

  $userName = explode(' ', brick_get_user_name($user));

  $form['reset']['message'] = array(
		'#markup' => "<div class='resetPasswordHeader'>Hi " . $userName[0] . ". Please enter a new password.</div>"
  );

  $form['reset']['pw'] = array(
                '#type' => "password",
                '#title' => t('Password:'),
                '#size' => 40,
                '#required' => TRUE,
  );

  $form['reset']['pwconf'] = array(
                '#type' => "password",
                '#title' => t('Password Again:'),
                '#size' => 40,
                '#required' => TRUE,
  );

  $form['reset']['uid'] = array(
		'#type' => "hidden",
		'#value' => $uid
  );

  $form['reset']['submit'] = array(
                '#type' => "submit",
  		'#value' => t('Change Password')
  ); 
 
  return $form;
}

function brick_pass_reset_validate($form, $form_state) {
  if ($form_state['values']['pw'] != $form_state['values']['pwconf']) {
     form_set_error('pw', 'Passwords did not match');
  }
}

function brick_pass_reset_submit($form, $form_state) {
   if (form_get_errors()) {
      return $form;
   }

   $user = user_load($form_state['values']['uid']);
 
   $update = array(
     'pass' => $form_state['values']['pw']
   ); 

   user_save($user, $update);

   drupal_set_message("Your password has been changed. Please login to continue");
 
   drupal_goto();
}

function brick_pw_reset_sent_form($form, $form_state, $user) {
        $form['thanks']['intro'] = array (
                '#markup' => '<div class="forgotPWMessage">An email has been sent to <b>' . $user . '</b> with a link that will allow you to reset your password</div>',
        );

        $form['thanks']['buttonArea'] = array(
                '#type' => "container",
                '#attributes' => array(
                        'id' => 'buttonArea'
                )
        );

        $form['thanks']['buttonArea']['submit'] = array(
                '#markup' => "<INPUT TYPE=\"button\" VALUE=\"Close\" class=\"form-button\" onClick=\"parent.location='http://v3.onebrick.org'\">"
        );


        return $form;
}

function brick_login_form($form, $form_state) {
	$form['loginWrapper'] = array(
		'#type' => "container",
		'#attributes' => array(
                        'id' => "loginWrap"
                )
	);
	$form['loginWrapper']['loginSection'] = array(
                '#type' => "container",
                '#attributes' => array(
                        'id' => "loginSection"
                )
        );
	$form['loginWrapper']['loginSection']['username'] = array(
		'#type' => "textfield",
		'#title' => t('Email:'),
		'#size' => 40,
		'#required' => TRUE
	);
	$form['loginWrapper']['loginSection']['password'] = array(
                '#type' => "password",
		'#attributes' => array(
                        'id' => "password"
                ),
                '#title' => t('Password:'),
                '#size' => 40,
		'#required' => TRUE
        );

	$form['loginWrapper']['loginSection']['buttonArea'] = array(
                '#type' => "container",
                '#attributes' => array(
                        'id' => 'buttonArea'
                )
        );
        $form['loginWrapper']['loginSection']['buttonArea']['submitLogin'] = array(
                '#type' => "button",
                '#value' => t('Sign In'),
                '#ajax' => array(
                        'wrapper' => 'loginWrap',
                        'callback' => 'brick_login_ajax',
                        'method' => 'html',
			'event' => 'click'
                )
        );
	$form['loginWrapper']['loginSection']['buttonArea']['loginFeedback'] = array(
                '#markup' => "<span id='loginFeedback'></span>"
        );
        $form['forgotPwArea']['forgotPwLinkSection'] = array(
                '#type' => "container",
                '#attributes' => array(
                        'id' => "forgotPwLinkSection"
                )
        );
	$form['forgotPwArea']['forgotPwLinkSection']['forgotPwLink'] = array(
                '#markup' => "<a id='forgotPwLink' href='/forgotpw/ajax/username' class='use-ajax'>reset password</a>"
        );
	// FYI, this clears the float that will be applied to the "throbber" when the user clicks Submit
        $form['signupArea']['floatClear'] = array(
                '#markup' => "<div style='clear:both'></div>"
        );


	$form['signupArea']['signupHeader'] = array(
                '#markup' => "<h3 class='loginHeader' id='signup'>Sign Up</h3>"
        );
    	$form['signupArea']['signupLinkContainer'] = array(
      		'#type' => "container",
		'#attributes' => array(
                        'id' => "signupSection"
                )
    	);

	$form['signupArea']['signupLinkContainer']['signupLink'] = array(
		'#markup' => "<a id='newUserLink' onclick='javascript:toSignupForm()'>Don't have an account? Click here to sign up!</a>"

	);
	return $form;
   
}

function brick_login_form_validate($form, $form_state) {
}

function build_create_account_form($existing_uid, $username) {
   $form = drupal_get_form('brick_create_account_form', $existing_uid, $username);
   
   return $form; 
}

function brick_move_to_login_form() {
  return brick_move_to_new_cbox_form("Login", drupal_render(drupal_get_form('brick_login_form')));
}

function brick_login_ajax($form, $form_state) {
   if (form_get_errors()) return $form['loginWrapper']['loginSection'];   

   global $user;

   $username = $form_state['values']['username'];
   $password = $form_state['values']['password'];

   // try to load by email first, and then by username
   $loadedUser = user_load_by_mail($username);
   if (!$loadedUser) {
      $loadedUser = user_load_by_name($username);
   }

   if ($loadedUser) {
      // see if this user needs to verify
      if (!check_user_verified($loadedUser)) {
         form_set_error('username', t('Please check your email to verify your account'));
      }
      else if (!brick_is_full_user($loadedUser)) {
	// I make sure to pass "formWrapper" here so that it replaces the entire form, not just the internal area
	return brick_move_to_new_cbox_form("Create Account", drupal_render(build_create_account_form($loadedUser->uid, $username)), "#formWrapper");
      }
      else {
            require_once DRUPAL_ROOT . '/' . variable_get('password_inc', 'includes/password.inc');
            if (user_check_password($password, $loadedUser)) {
                $user = $loadedUser;
                
                user_login_finalize();

		// refresh the user's page
		$commands = brick_build_refresh_page_command();

            	return $commands;
	    }
            else {
                form_set_error('password', t('Invalid Password'));
            }	
      }
   }
   else {
      form_set_error('username', t('Invalid Email Address'));
   }

   return $form['loginWrapper']['loginSection'];
}

function brick_handle_rpx() {
  $token = isset($_REQUEST['token']) ? $_REQUEST['token'] : '';

  if ($token) {
    $rpx_data = RPX::auth_info($token, variable_get('rpx_apikey', ''), variable_get('rpx_extended_authinfo', FALSE));
  
    $rpx_id = $rpx_data['profile']['identifier'];
    $provider_title = $rpx_data['profile']['providerName'];

    // Save provider info (for token replacement and account linking).
    $_SESSION['rpx_last_provider_info'] = array(
      'name' => _rpx_get_provider_machine_name($provider_title),
      'title' => $provider_title,
    );

    $account = user_external_load($rpx_id);

    if (isset($account->uid)) {
        rpx_core_delete_rpx_session();
    }
    else {
	watchdog("Info", "Creating new account");
        $account = array();
        $account['id'] = $rpx_id;
    	$account['password'] = user_password();
        $account['data']['rpx_data']['profile'] = $rpx_data['profile'];
        $account = _rpx_save_profile_picture($account);
        
        _rpx_import_user_data($account);
 
        unset($account['data']['rpx_data']);
 
        user_save($account);   
 
        rpx_core_delete_rpx_session();   
    }
  }
}

?>
@


1.24
log
@*** empty log message ***
@
text
@d2 1
a2 1
// $Id: brick_login.php,v 1.23 2013/08/01 20:41:42 crc Exp crc $
d47 2
d81 1
a81 1
   $user = user_save($account, $update);
d83 6
a88 1
   if (!empty($user->uid)) {
d91 1
a91 1
            ->condition('entity_id', $user->uid, '=')
d95 1
a95 1
            ->condition('entity_id', $user->uid, '=')
d107 1
a107 1
   $udata->uid = $user->uid;
d111 7
a117 1
   $commands = brick_move_to_new_cbox_form("Thanks for signing up!", drupal_render(drupal_get_form('brick_thankyou_form')), "#formWrapper");
d241 8
@


1.23
log
@*** empty log message ***
@
text
@d2 1
a2 1
// $Id: brick_login.php,v 1.22 2013/08/01 18:46:02 crc Exp crc $
d124 1
a124 1
                '#markup' => '<div class="thankYouMessage">Please check your email for a special link that will activate your account.</div>',
d217 1
a217 1
		'#title' => t('Sign me up for the OneBrick newsletter (no spam, promise!)'),
@


1.22
log
@*** empty log message ***
@
text
@d2 1
a2 1
// $Id: brick_login.php,v 1.21 2013/07/30 20:38:16 jordan Exp crc $
d281 1
a281 1
        	'#title' => t('This is my email:'),
d335 1
a335 1
     drupal_set_message("Reset password link has expired or you used an invalid link.", 'error');
d342 1
a342 1
		'#markup' => "<div class='resetPasswordHeader'>Hi " . $userName[0] . ". Please provide us with a new password you would like to use for the site.</div>"
d391 1
a391 1
   drupal_set_message("Your password has been changed successfully. Please login again");
d431 1
a431 1
		'#title' => t('This is my email:'),
d440 1
a440 1
                '#title' => t('This is my password:'),
@


1.21
log
@*** empty log message ***
@
text
@d2 1
a2 1
// $Id: brick_login.php,v 1.20 2013/07/30 17:31:00 jordan Exp jordan $
d471 1
a471 1
                '#markup' => "<a id='forgotPwLink' href='/forgotpw/ajax/username' class='use-ajax'>I forgot my password</a>"
@


1.20
log
@*** empty log message ***
@
text
@d2 1
a2 1
// $Id: brick_login.php,v 1.19 2013/07/26 22:58:15 jordan Exp jordan $
d159 10
a168 3
		$form['create']['message'] = array(
      			'#markup' => "<div class='messages status'><b>We've recently updated our system!</b> Please provide a new password to login. Sorry for the inconvienence!</div>"
		);
@


1.19
log
@c.
@
text
@d2 1
a2 1
// $Id: brick_login.php,v 1.18 2013/07/26 22:50:32 jordan Exp jordan $
d104 1
a104 1
   $commands = brick_move_to_new_cbox_form("Let's Go!", drupal_render(drupal_get_form('brick_thankyou_form')), "#formWrapper");
d124 1
a124 1
                '#markup' => '<div class="thankYouMessage">Thanks for signing up! Please check your email for a special link that will activate your account</div>',
a127 12
        $form['thanks']['buttonArea'] = array(
                '#type' => "container",
                '#attributes' => array(
                        'id' => 'buttonArea'
                )
        );

        $form['thanks']['buttonArea']['submit'] = array(
        	'#markup' => "<INPUT TYPE=\"button\" VALUE=\"Get Started\" class=\"form-button\" onClick=\"javascript: jQuery.colorbox.close();\">"
	);


@


1.18
log
@*** empty log message ***
@
text
@d2 1
a2 1
// $Id: brick_login.php,v 1.17 2013/06/27 23:44:14 jordan Exp jordan $
d216 1
a216 1
		'#title' => t('Default chapter:')
@


1.17
log
@*** empty log message ***
@
text
@d2 1
a2 1
// $Id: brick_login.php,v 1.16 2013/06/25 22:38:25 jordan Exp jordan $
d217 1
@


1.16
log
@*** empty log message ***
@
text
@d2 1
a2 1
// $Id: brick_login.php,v 1.15 2013/01/27 02:44:49 jordan Exp jordan $
d20 1
a20 1
   $newUser->roles = array(array_search('guest_user', $roles) => 1);
d80 1
a80 3

   watchdog("Info", "Saving new user 3");
   
d99 5
d109 13
d494 1
a494 1
		'#markup' => "<a id='newUserLink' href='gosignup/ajax' class='use-ajax'>Don't have an account? Click here to sign up!</a>"
d529 5
a533 1
      if (!brick_is_full_user($loadedUser)) {
d593 2
a594 2
        user_save($account);
    
@


1.15
log
@*** empty log message ***
@
text
@d2 1
a2 1
// $Id: brick_login.php,v 1.14 2012/10/06 07:04:34 jordan Exp jordan $
d73 1
a73 1
   $update['status'] = 1;
d94 1
a94 1
   watchdog("Info", "Logging in User");
d96 1
a96 1
   user_login_finalize();
d98 3
d108 1
a108 1
                '#markup' => '<div class="thankYouMessage">Thanks for signing up! Now go ahead and get ready to find new horizons in that disaster you call your life!!</div>',
d120 1
a120 1
        	'#markup' => "<INPUT TYPE=\"button\" VALUE=\"Get Started\" class=\"form-button\" onClick=\"parent.location='http://v3.onebrick.org/calendar/month'\">"
d223 1
a223 1
	$form['create']['createButtonArea']['submit'] = array(
d439 1
a439 1
        $form['loginWrapper']['loginSection']['buttonArea']['submit'] = array(
@


1.14
log
@*** empty log message ***
@
text
@d2 1
a2 1
// $Id: brick_login.php,v 1.13 2012/09/25 06:53:24 jordan Exp jordan $
d125 1
a125 1
   return brick_move_to_new_cbox_form("Forgot Password", drupal_render(drupal_get_form('brick_forgot_pw_form', $_POST['username'])), "#formWrapper");
d242 1
a242 1
                if ($loadedUser && brick_is_full_user($loadedUser)) {
d252 7
a258 2
    	// this is a test
	$form['emailHeader'] = array(
d261 1
a261 1
    	$form['emailSection'] = array(
d264 1
a264 1
    	$form['emailSection']['username'] = array(
d271 10
d285 9
d296 105
d456 1
a456 1
                '#markup' => "<a id='forgotPwLink' href='forgotpw/ajax/username' class='use-ajax'>I forgot my password</a>"
@


1.13
log
@*** empty log message ***
@
text
@d2 1
a2 1
// $Id: brick_login.php,v 1.12 2012/09/18 04:44:46 jordan Exp jordan $
d117 1
a117 1
        	'#markup' => "<INPUT TYPE=\"button\" VALUE=\"Get Started\" onClick=\"parent.location='http://v3.onebrick.org/calendar/month'\">"
a137 8
	$form['create']['username'] = array(
                '#type' => "textfield",
                '#title' => t("Email:"),
                '#size' => 40,
                '#required' => TRUE,
		'#default_value' => $username
        );
 
d140 1
d146 1
d149 15
d241 2
a242 2
                $newuser = load_user($mail);
                if ($newuser && brick_is_full_user($newuser)) {
d346 1
a346 1
		'#markup' => "<a id='newUserLink' href='gosignup/ajax' class='use-ajax'>Click here to sign up or if you don't have a password</a>"
a372 1
   $havePW = true;//$_POST['havepassword'] == 'dohavepw';
d375 3
a377 3
   $newuser = user_load_by_mail($username);
   if (!$newuser) {
      $newuser = user_load_by_name($username);
d380 6
a385 2
   if ($newuser) {
      if ($havePW) {
d387 2
a388 2
            if (user_check_password($password, $newuser)) {
                $user = $newuser;
d392 1
a400 6
      else if (brick_is_full_user($newuser)) {
        form_set_error('username', t('That email has an account'));
      }
      else {
        return brick_move_to_new_cbox_form("Create Account", drupal_render(build_create_account_form($newuser->uid, $username)));
      }
d402 1
a402 1
   else if ($havePW) {
a404 3
   else {
      return brick_move_to_new_cbox_form("Create Account", drupal_render(build_create_account_form(NULL, $username)));
   }
@


1.12
log
@*** empty log message ***
@
text
@d2 1
a2 1
// $Id: brick_login.php,v 1.11 2012/08/14 02:54:23 ubuntu Exp jordan $
d27 8
a37 5
   if ($form_state['values']['newusername']) {
     // copy over the username field data if the user had provided one (they clicked 'Sign Up')
     $form_state['values']['username'] = $form_state['values']['newusername'];
   }

d46 1
d55 1
d59 6
d66 1
a66 1
       $update['mail'] = $mail;  
d125 1
a125 1
   return brick_move_to_new_cbox_form("Forgot Password", drupal_render(drupal_get_form('brick_forgot_pw_form')), "#formWrapper");
d129 1
a129 1
   return brick_move_to_new_cbox_form("Create Account", drupal_render(drupal_get_form('brick_create_account_form')), "#formWrapper");  
d138 1
a138 10
	if (!empty($username)) {
		$form['create']['existinguser2'] = array(
			'#type' => 'item',
			'#title' => t("Email:"),
			'#markup' => "$username"
		);
	}
	else {
	  // Used when the user directly goes to 'sign up'
	  $form['create']['newusername'] = array(
d142 4
a145 4
                '#required' => TRUE
          );
	}
    
d147 1
d149 6
a154 3
    	if (!empty($uid)) {
        	$loadedUser = user_load($uid);       
    	}
a155 2
    	$name = brick_get_user_name($loadedUser);

d165 1
a165 1
		'#title' => t('One more time:'),
a203 6
	$form['create']['username'] = array(
		'#type' => 'hidden',
		'#value' => $username,
		'#default_value' => $username
	);

d231 6
a236 12
		if ($form_state['values']['newusername']) {
                	$mail = $form_state['values']['newusername'];
                	$newuser = user_load_by_mail($mail);
                	if (!$newuser) {
                        	$newuser = user_load_by_name($mail);
                	}

                	if ($newuser) {
                        	form_set_error('username', "Username is already in use");
                	}
        	}
		else if ($form_state['values']['pw'] != $form_state['values']['pwconf']) {
d242 1
a242 1
function brick_forgot_pw_form() {
d254 2
a255 1
        	'#required' => TRUE
d264 1
a264 1
	$form['login']['loginSection'] = array(
d267 6
d275 2
a276 2
	);
	$form['login']['loginSection']['username'] = array(
d282 1
a282 10
	$form['login']['loginSection']['forgotPwLinkSection'] = array(
		'#type' => "container",
                '#attributes' => array(
                        'id' => "forgotPwLinkSection"
                )
	);
	$form['login']['loginSection']['forgotPwLinkSection']['forgotPwLink'] = array(
                '#markup' => "<a id='forgotPwLink' href='forgotpw/ajax' class='use-ajax'>I forgot my password</a>"
        );
        $form['login']['loginSection']['password'] = array(
d284 1
a284 1
                '#attributes' => array(
d292 1
a292 1
	$form['login']['buttonArea'] = array(
d298 1
a298 1
        $form['login']['buttonArea']['submit'] = array(
d302 1
a302 1
                        'wrapper' => 'formWrapper',
d304 2
a305 1
                        'method' => 'html'
d308 1
a308 1
	$form['login']['buttonArea']['loginFeedback'] = array(
d311 9
d321 1
a321 1
	$form['login']['floatClear'] = array(
d324 3
a326 1
	$form['login']['signupHeader'] = array(
d329 1
a329 1
    	$form['login']['signupSection'] = array(
d335 2
a336 1
	$form['login']['signupSection']['nopw'] = array(
d338 1
a344 3
   if ($_POST['havepassword'] == "dohavepw" && empty($form_state['values']['password'])) {
		form_set_error('password', 'Please supply a password');
   }
d358 1
a358 1
   if (form_get_errors()) return $form;   
d402 1
a402 1
   return $form;
@


1.11
log
@*** empty log message ***
@
text
@d2 1
a2 1
// $Id: brick_login.php,v 1.10 2012/08/08 05:10:12 jordan Exp $
d117 4
d139 1
a139 1
                '#size' => 30,
d155 1
a155 1
		'#size' => 30,
d162 1
a162 1
		'#size' => 30,
d170 1
a170 1
		'#size' => 30,
d206 1
a206 1
	$form['create']['buttonArea'] = array(
d209 1
a209 1
			'id' => 'buttonArea'
d213 1
a213 1
	$form['create']['buttonArea']['submit'] = array(
d224 1
a224 1
	$form['create']['buttonArea']['loginFeedback'] = array(
d271 5
a275 5
    	$form['login']['emailHeader'] = array(
		'#markup' => "<h3 class='loginHeader'>Email Address</h3>"
	);
	$form['login']['emailSection'] = array(
		'#type' => "container"
d277 1
a277 1
	$form['login']['emailSection']['username'] = array(
d283 5
a287 2
	$form['login']['loginHeader'] = array(
		'#markup' => "<h3 class='loginHeader'>Password</h3>"
d289 12
a301 23
    	$form['login']['havePwSection'] = array(
      		'#type' => "container"
    	);
	$form['login']['havePwSection']['dohavepw'] = array(
		'#markup' => "<input class='loginScreenRadios' id='dohavepw' value='dohavepw' type='radio' name='havepassword' checked>" 
	);
	$form['login']['havePwSection']['password'] = array(
		'#type' => "password",
		'#attributes' => array(
			'id' => "password"
		),
		'#title' => t('This is my password:'),
		'#size' => 30
	);
	$form['login']['newUserSection'] = array(
		'#type' => "container"
	);
	$form['login']['newUserSection']['havepassword'] = array(
		'#markup' => "<input class='loginScreenRadios' id='nopw' value='nopw' type='radio' name='havepassword'>"
	);
	$form['login']['newUserSection']['nopw'] = array(
		'#markup' => "<label for='nowpw'>I'm a new user or I don't have a password yet</label>"
	);
d303 26
a328 1
		'#type' => "container",
d330 5
a334 11
			'id' => 'buttonArea'
		)
	); 
	$form['login']['buttonArea']['submit'] = array(
		'#type' => "button",
		'#value' => t('Sign In'),
		'#ajax' => array(
			'wrapper' => 'formWrapper',
			'callback' => 'brick_login_ajax',
			'method' => 'html'
		)
a335 7
	$form['login']['buttonArea']['loginFeedback'] = array(
		'#markup' => "<span id='loginFeedback'></span>"
	);
	$form['login']['buttonArea']['forgotPwLink'] = array(
		'#markup' => "<a id='forgotPwLink' href='forgotpw/ajax' class='use-ajax'>I forgot my password</a>"
	);

d363 1
a363 1
   $havePW = $_POST['havepassword'] == 'dohavepw';
d404 39
@


1.10
log
@*** empty log message ***
@
text
@d2 1
a2 1
// $Id: brick_login.php,v 1.9 2012/07/17 03:10:54 jordan Exp jordan $
a10 2
   $nameArray = explode(" ", $name, 2);

d14 1
a14 2
   $newUser->field_user_fname[LANGUAGE_NONE][0]['value'] = $nameArray[0];
   $newUser->field_user_sname[LANGUAGE_NONE][0]['value'] = (count($nameArray) > 1 ? $nameArray[1] : "");
d40 1
a40 3
   $mail = $form_state['values']['username'];
   $first = $form_state['values']['firstname'];
   $last = $form_state['values']['lastname'];
d59 1
a59 3
   $update['field_user_fname'][LANGUAGE_NONE][0]['value'] = $first;
   $update['field_user_sname'][LANGUAGE_NONE][0]['value'] = $last;
   $update['field_user_fullname'][LANGUAGE_NONE][0]['value'] = $first . " " . $last;
d162 1
a162 1
	$form['create']['firstname'] = array(
d164 2
a165 2
		'#title' => t("Your first name:"),
		'#default_value' => $name[0],
a169 8
	$form['create']['lastname'] = array(
		'#type' => "textfield",
		'#title' => t("Your last name:"),
		'#default_value' => $name[1],
		'#size' => 30,
		'#required' => TRUE,
	);

@


1.9
log
@*** empty log message ***
@
text
@d2 1
a2 1
// $Id: brick_login.php,v 1.8 2012/07/03 03:07:45 jordan Exp jordan $
d33 5
d124 6
a129 1
function brick_create_account_form($form, $form_state, $uid, $username) {
d137 9
d243 15
a257 2
	if (!form_get_errors() && $form_state['values']['pw'] != $form_state['values']['pwconf']) {
		form_set_error('pwconf', "Password fields don't match");
@


1.8
log
@*** empty log message ***
@
text
@d2 1
a2 1
// $Id: brick_login.php,v 1.7 2012/05/16 01:24:18 jordan Exp jordan $
d34 1
d51 1
a51 1
	   $user = user_load($uid);
d54 2
a55 3
       $user = null;
	   $update['name'] = $mail;
	   $update['mail'] = $mail;  
d61 1
d66 1
d68 5
a72 1
   $user = user_save($user, $update);
d85 2
d89 1
a89 1
   $commands = brick_move_to_new_cbox_form("Thanks!", "Redirecting you...");
d94 21
d128 1
a128 1
    $loadedUser = null;
d130 3
a132 3
    if (!empty($uid)) {
        $loadedUser = user_load($uid);       
    }
d134 1
a134 1
    $name = brick_get_user_name($loadedUser);
d230 1
a230 3


    // this is a test
d232 11
a242 11
        '#markup' => "<h3 class='loginHeader'>Email Address</h3>"
    );
    $form['emailSection'] = array(
        '#type' => "container"
    );
    $form['emailSection']['username'] = array(
        '#type' => "textfield",
        '#title' => t('This is my email:'),
        '#size' => 40,
        '#required' => TRUE
    );
d250 1
a250 1
    $form['login']['emailHeader'] = array(
d266 3
a268 3
    $form['login']['havePwSection'] = array(
      '#type' => "container"
    );
@


1.7
log
@*** empty log message ***
@
text
@d2 1
a2 1
// $Id: brick_login.php,v 1.6 2012/03/07 05:01:35 jordan Exp $
d327 1
a327 1
		$commands = array();
d329 2
a330 4
 		$commands[] = ajax_command_invoke(NULL, 'reloadPage');
                
                return array('#type' => 'ajax', '#commands' => $commands);
            }
@


1.6
log
@*** empty log message ***
@
text
@d2 1
a2 1
// $Id: brick_login.php,v 1.5 2012/02/21 09:46:58 jordan Exp jordan $
d43 4
d48 1
a48 1

d53 1
d55 2
a56 1
	   $update['mail'] = $mail;
d58 3
a60 1

d62 3
a64 1
   $update['roles'] = array(DRUPAL_AUTHENTICATED_RID);
d67 11
d80 2
d83 1
a83 2
   return "Thanks for signing up!";

d98 8
d124 1
a124 1
		'#default_value' => $user->field_user_fname[LANGUAGE_NONE][0]['value'],
d132 1
a132 1
		'#default_value' => $user->field_user_sname[LANGUAGE_NONE][0]['value'],
d205 11
a215 11
                '#markup' => "<h3 class='loginHeader'>Email Address</h3>"
        );
        $form['emailSection'] = array(
                '#type' => "container"
        );
        $form['emailSection']['username'] = array(
                '#type' => "textfield",
                '#title' => t('This is my email:'),
                '#size' => 40,
                '#required' => TRUE
        );
d223 1
a223 1
   $form['login']['emailHeader'] = array(
d239 1
a239 1
   $form['login']['havePwSection'] = array(
d241 1
a241 1
   );
a287 14
function brick_reset_login_form($form, $form_state) {
   $form['login']['reset'] = array(
      '#type' => "button",
      '#ajax' => array(
         'wrapper' => 'formWrapper',
         'callback' => 'brick_move_to_login_form',
         'method' => 'html',
         'progress' => array()
      )
   );

   return $form;
}

d321 13
a333 9
         require_once DRUPAL_ROOT . '/' . variable_get('password_inc', 'includes/password.inc');
	 if (user_check_password($password, $newuser)) {
      		$user = $newuser;

      		user_login_finalize();

      		$form['#markup'] = "Logged In";
   	 }
	 else {
d335 1
a335 1
         }	
d338 1
a338 1
 	 		form_set_error('username', t('That email has an account'));
d341 1
a341 1
	 		return brick_move_to_new_cbox_form("Create Account", drupal_render(build_create_account_form($newuser->uid, $username)));
@


1.5
log
@*** empty log message ***
@
text
@d1 334
a334 231
<?php
// $Id: brick_login.php,v 1.4 2012/02/08 06:16:52 jordan Exp jordan $

function brick_colorbox_form_access() {
   return TRUE;
}

function brick_create_guest_account($emailAddr, $name) {
  $roles = user_roles();

  $nameArray = explode(" ", $name, 2);

  $newUser = new StdClass();
  $newUser->is_new = TRUE;
  $newUser->status = TRUE;
  $newUser->field_user_fname[LANGUAGE_NONE][0]['value'] = $nameArray[0];
  $newUser->field_user_sname[LANGUAGE_NONE][0]['value'] = (count($nameArray) > 1 ? $nameArray[1] : "");
  $newUser->name = $emailAddr;
  $newUser->pass = 'OneBrick';
  $newUser->mail = $emailAddr;
  $newUser->status = 1;
  $newUser->timezone = "America/New_York";
  $newUser->roles = array(array_search('guest user', $roles) => 1);
  $newUser->init = $emailAddr;
  user_save($newUser);

  return $newUser;
}

function brick_update_password() {
   global $user;

   $uid = $_GET['uid'];
   $pass = $_GET['newpassword1'];
   $mail = $_GET['email'];
   
   $update = array();

   if (!empty($uid)) {
   	$user = user_load($uid);
   }
   else {
        $update['name'] = $mail;
        $update['mail'] = $mail;
   }

   $update['pass'] = $pass;
   $update['roles'] = array(DRUPAL_AUTHENTICATED_RID);

   $user = user_save($user, $update);

   user_login_finalize();

   drupal_json_output(array('status' => 1));

   exit();
}

function brick_create_form() {

   $form['pw'] = array(
      '#type' => "textfield",
      '#title' => t('Password:'),
      '#size' => 30
   );

   $form['pwconf'] = array(
      '#type' => "textfield",
      '#title' => t('One more time:'),
      '#size' => 30
   );

   $form['userfullname'] = array(
      '#type' => "textfield",
      '#title' => t("What's your name?:"),
      '#default_value' => $user->name,
      '#size' => 30
   );
   
   $chapters = variable_get('brick_chapters');
   $chapterMap;
 
   foreach ($chapters as $chapter) {
      $chapterMap[$chapter['nid']] = $chapter['title'];
   }

   $form['chapters'] = array(
      '#type' => "select",
      '#options' => $chapterMap,
      '#title' => t('Default Chapter')
   );

   $form['buttonArea'] = array(
      '#type' => "container"
   );

   $form['buttonArea']['submit'] = array(
      '#type' => "button",
      '#button_type' => 'button',
      '#value' => t('Create Account'),
      '#attributes' => array(
         "onclick" => "javascript:sendPasswordUpdate(); return false;"
       )
   );

   $form['buttonArea']['loginFeedback'] = array(
      '#markup' => "<span id='loginFeedback'></span>"
   );
 
   return $form;  
}

function brick_login_form($form, $form_state) {

   $form['login'] = array(
      '#prefix' => "<div id='mainWrapper'>",
      '#suffix' => "</div>"
   );
 
   $form['login']['emailHeader'] = array(
      '#markup' => "<h3 class='loginHeader'>Email Address</h3>"
   );
   $form['login']['emailSection'] = array(
      '#type' => "container"
   );
   $form['login']['emailSection']['username'] = array(
      '#type' => "textfield",
      '#title' => t('This is my email:'),
      '#size' => 40
   );
   $form['login']['loginHeader'] = array(
      '#markup' => "<h3 class='loginHeader'>Password</h3>"
   );
   $form['login']['dohavepw'] = array(
      '#markup' => "<input class='loginScreenRadios' id='dohavepw' value='dohavepw' type='radio' name='havepassword' checked>" 
   );
   $form['login']['password'] = array(
      '#type' => "password",
      '#attributes' => array(
         'id' => "password"
      ),
      '#title' => t('This is my password:'),
      '#size' => 30
   );
   $form['login']['newUserSection'] = array(
      '#type' => "container"
   );
   $form['login']['newUserSection']['havepassword'] = array(
      '#markup' => "<input class='loginScreenRadios' id='nopw' value='nopw' type='radio' name='havepassword'>"
   );
   $form['login']['newUserSection']['nopw'] = array(
      '#markup' => "<label for='nowpw'>I'm a new user or I don't have a password yet</label>"
   );
   $form['login']['buttonArea'] = array(
      '#type' => "container",
      '#attributes' => array(
         'id' => 'buttonArea'
      )
   ); 
   $form['login']['buttonArea']['submit'] = array(
      '#type' => "button",
      '#value' => t('Sign In'),
      '#ajax' => array(
         'wrapper' => 'mainWrapper',
         'callback' => 'brick_login_ajax',
         'effect' => 'fade'
      )
   );
   $form['login']['buttonArea']['loginFeedback'] = array(
      '#markup' => "<span id='loginFeedback'></span>"
   );
   $form['login']['buttonArea']['forgotPwLink'] = array(
      '#markup' => "<a id='forgotPwLink' href='javascript:forgotpw()'>I forgot my password</a>"
   );

   return $form;
}

function brick_login_form_validate($form, &$form_state) {
   if (empty($form_state['values']['password'])) {
      form_set_error('password', t('King Kong is not allowed to use this form.'));
   }
}

function brick_login_ajax($form, $form_state) {
   return $form;  

   global $user;

   $username = $_GET['username'];
   $password = $_GET['password'];
   $havePW = $_GET['havepassword'] == "dohavepw";

   // try to load by email first, and then by username
   $newuser = user_load_by_mail($username);
   if (!$newuser) {
      $newuser = user_load_by_name($username);
   }

   if ($newuser) {
      if ($havePW) {
         require_once DRUPAL_ROOT . '/' . variable_get('password_inc', 'includes/password.inc');
	 if (user_check_password($password, $newuser)) {
      		$user = $newuser;

      		user_login_finalize();

      		drupal_json_output(array('status' => 1));
   	 }
	 else {
		drupal_json_output(array('status' => 0, 'message' => "Invalid Password"));
         }	
      }
      else if (brick_is_full_user($newuser)) {
         drupal_json_output(array('status' => 0, 'message' => "That Email Has an Account"));
      }
      else {
         drupal_json_output(array('status' => 0, 'userId' => $newuser->uid, 'newpage' => drupal_render(drupal_get_form('brick_create_form')), 'title' => 'Create Account'));
      }
   }
   else if ($havePW) {
      drupal_json_output(array('status' => 0, 'message' => "Invalid Email Address"));
   }
   else {
      drupal_json_output(array('status' => 0, 'userId' => $newuser->uid, 'newpage' => drupal_render(drupal_get_form('brick_create_form')), 'title' => 'Create Account'));
   }

   exit();
}

?>
@


1.4
log
@*** empty log message ***
@
text
@d2 1
a2 1
// $Id: brick_login.php,v 1.3 2012/01/25 05:53:24 crc Exp jordan $
d59 129
a187 1
function brick_login_ajax() {
d218 1
a218 1
         drupal_json_output(array('status' => 0, 'userId' => $newuser->uid, 'newpage' => file_get_contents(path_to_theme() . '/update_password.php')));
d225 1
a225 1
      drupal_json_output(array('status' => 0, 'userId' => $newuser->uid, 'newpage' => file_get_contents(path_to_theme() . '/update_password.php')));
@


1.3
log
@*** empty log message ***
@
text
@d2 1
a2 1
// $Id: brick_login.php,v 1.2 2012/01/25 02:12:14 crc Exp $
d30 29
d64 1
d72 16
a87 11
   require_once DRUPAL_ROOT . '/' . variable_get('password_inc', 'includes/password.inc');
   if ($newuser && user_check_password($password, $newuser)) {
      $user = $newuser;

      user_login_finalize();

      drupal_json_output(array('status' => 1));
   }
   else {
      if ($newuser && !brick_is_full_user($newuser)) {
        drupal_json_output(array('status' => 0, 'userId' => $newuser->uid, 'newpage' => file_get_contents(path_to_theme() . '/update_password.php')));
d90 1
a90 1
        drupal_json_output(array('status' => 0, 'message' => "Invalid Username or Password"));
d93 6
@


1.2
log
@*** empty log message ***
@
text
@d2 1
a2 1
// $Id: brick_login.php,v 1.1 2012/01/25 02:00:55 root Exp crc $
d8 2
a9 65
function brick_login_form($form_state) {
  $form = array();
  $form['existing'] = array(
    '#type' => 'container',
    '#attributes' => array(
       'class' => array(
         'existing-area'
       ),
    ),
  );

  $form['existing']['intro'] = array(
    '#markup' => 'Login with your OneBrick email and password'
  );
  
  $form['existing']['emailexist'] = array(
    '#size' => '35',
    '#weight' => '0',
    '#type' => 'textfield',
    '#title' => t('Email'),
    '#default_value' => '',
  );

  $form['existing']['pass'] = array(
    '#size' => '35',
    '#type' => 'password',
    '#title' => t('Password')
  );

  $form['guest'] = array(
    '#type' => 'container',
    '#attributes' => array(
       'class' => array(
         'guest-area'
        ),
     ),
  );

  $form['guest']['intro'] = array(
    '#markup' => 'If you would like to use this site as a guest instead, please enter your email so we can contact you',
  );

  $form['guest']['email'] = array(
    '#size' => '35',
    '#type' => 'textfield',
    '#title' => t('Guest Email'),
  );

  $form['guest']['name'] = array(
    '#size' => '35',
    '#type' => 'textfield',
    '#title' => t('Your Full Name')
  );

  $form['existing']['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Login',
    '#submit' => array('brick_login_existing')
  );

  $form['guest']['submit'] = array(
    '#type' => 'submit',
    '#value' => 'RSVP as guest',
    '#submit' => array('brick_login_guest')
  );
d11 1
a11 22
  return $form;
}

function brick_login_guest($form, &$form_state) {
   $emailAddr = $form_state['values']['email'];

   $currUser = user_load_by_mail($emailAddr);
   
   if ($currUser) {
   }
   else {
      $newUser = new StdClass();
      $newUser->is_new = TRUE;
      $newUser->status = TRUE;
      $newUser->field_user_fname[LANGUAGE_NONE][0]['value'] = 'Jordan';
      $newUser->field_user_sname[LANGUAGE_NONE][0]['value'] = 'Laughlin';
      $newUser->name = $emailAddr;
      $newUser->pass = 'guest';
      $newUser->mail = $emailAddr;
      $newUser->status = 1;
      $newUser->init = $emailAddr;
      user_save($newUser);
d13 13
a25 2
      $currUser = $newUser;
   }
d27 1
a27 1
   drupal_goto($currUser->uid);
d30 1
a30 1
function brick_login_existing($form, &$form_state) {
d33 3
d37 1
a37 1
   $newuser = user_load_by_mail($form_state['values']['emailexist']);
d39 1
a39 1
      $newuser = user_load_by_name($form_state['values']['emailexist']);
d43 1
a43 1
   if ($newuser && user_check_password($form_state['values']['pass'], $newuser)) {
d48 1
a48 1
      drupal_goto('success');
d51 6
a56 1
      drupal_goto('fail');
d58 2
d62 1
a62 3
function brick_get_login_form() {
   return drupal_get_form('brick_login_form');
}  
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
// $Id$
a127 452

/**
 * @@file
 *
 * A module that contains utility functions used across the One Brick website.
 */
function brick_get_rsvp_list($node) {
  $q = "
  SELECT DISTINCT
    field_revision_field_rsvp_person.field_rsvp_person_uid as uid,
    field_revision_field_rsvp_role.field_rsvp_role_value as role,
    users.mail,
    field_revision_field_user_fname.field_user_fname_value as fname,
    field_revision_field_user_sname.field_user_sname_value as sname
  FROM field_revision_field_rsvp_event
    left join field_revision_field_rsvp_person
      on field_revision_field_rsvp_event.entity_id=field_revision_field_rsvp_person.entity_id
    left join field_revision_field_rsvp_role
      on field_revision_field_rsvp_event.entity_id=field_revision_field_rsvp_role.entity_id
    left join users
      on field_revision_field_rsvp_person.field_rsvp_person_uid=users.uid
    left join field_revision_field_user_fname 
      on field_revision_field_rsvp_person.field_rsvp_person_uid=field_revision_field_user_fname.entity_id
    left join field_revision_field_user_sname 
      on field_revision_field_rsvp_person.field_rsvp_person_uid=field_revision_field_user_sname.entity_id
  WHERE field_rsvp_event_nid = ".$node->nid;

  /*
  $rsvp_list = db_query($q);
  while($rsvp = $rsvp_list->fetchAssoc()) {
    print_r($rsvp); // debug
  }
*/
  return(db_query($q));
}

function brick_1b_email($uid) {
  $q = "
  SELECT field_staff_email_value FROM field_revision_field_staff_person
  JOIN field_revision_field_staff_email
  on field_revision_field_staff_person.entity_id=field_revision_field_staff_email.entity_id
  WHERE field_staff_person_uid=$uid;";

  $c = db_query($q)->fetchField();
  return($c);
}

function brick_event_full($node) {
   $q = "SELECT count(entity_id) FROM field_data_field_rsvp_event where field_rsvp_event_nid = ".$node->nid;
   $c = db_query($q)->fetchField();

/* debug
  printf("Requested: %s, RSVP Capacity: %s, RSVPed: %s",
    $node->field_event_requested['und'][0]['value'],
    $node->field_event_max_rsvp_capacity['und'][0]['value'],
    $c);
*/

  return($c >= $node->field_event_max_rsvp_capacity['und'][0]['value']);
}


function brick_event_start($node) {
  return(strtotime($node->field_event_date['und'][0]['value']));
}

function brick_event_open_date($node) {
  return(strtotime($node->field_event_rsvp_date['und'][0]['value']));
}

function brick_add_rsvp($eid, $uid, $note) {
$rid = db_insert('node') -> fields(array(
  'uid' => $uid,
  'vid' => 999999999, /* temporarily set to something reset in db_update() on next line */
  'created'=>REQUEST_TIME,
  'changed'=>REQUEST_TIME,
  'comment'=>'2',
  'title'=>'new rsvp',
  'language'=>'und',
  'type'=>'rsvp'))->execute();

db_update('node') -> fields(array('vid' => $rid)) 
->condition ('nid', $rid, '=') ->execute();

db_insert('field_data_field_rsvp_event') -> fields(array(
  'entity_type'=>'node',
  'bundle'=>'rsvp',
  'entity_id'=>$rid,
  'revision_id'=>$rid,
  'language'=>'und', 
  'delta'=>0, 
  'field_rsvp_event_nid'=>$eid))->execute();

db_insert('field_data_field_rsvp_person') -> fields(array(
  'entity_type'=>'node',
  'bundle'=>'rsvp',
  'entity_id'=>$rid,
  'revision_id'=>$rid,
  'language'=>'und',
  'delta'=>0, 
  'field_rsvp_person_uid'=>$uid))->execute();

db_insert('field_data_field_rsvp_role') -> fields(array(
  'entity_type'=>'node',
  'bundle'=>'rsvp',
  'entity_id'=>$rid,
  'revision_id'=>$rid,
  'language'=>'und',
  'delta'=>0, 
  'field_rsvp_role_value'=>'Volunteer'))->execute();

db_insert('field_data_field_rsvp_note') -> fields(array(
  'entity_type'=>'node',
  'bundle'=>'rsvp',
  'entity_id'=>$rid,
  'revision_id'=>$rid,
  'language'=>'und',
  'delta'=>0, 
  'field_rsvp_note_value'=>$note))->execute();
}

function brick_get_rsvp_status($n, $u) {
  $r = db_query("SELECT * FROM  field_data_field_rsvp_person 
  LEFT JOIN field_data_field_rsvp_event ON field_data_field_rsvp_person.entity_id
     = field_data_field_rsvp_event.entity_id
  WHERE field_data_field_rsvp_person.field_rsvp_person_uid = $u->uid
  AND field_data_field_rsvp_event.field_rsvp_event_nid = $n->nid");
  return($r->rowCount()>0);
}

function brick_load_chapters() {
	$q = "
		SELECT nid, title from node 
			left join field_data_field_chapter_hide_from_menu on field_data_field_chapter_hide_from_menu.entity_id = nid 
		WHERE type = 'chapter' and status = 1 and
			field_data_field_chapter_hide_from_menu.deleted = 0 and
			field_data_field_chapter_hide_from_menu.field_chapter_hide_from_menu_value != 1;
	";
   $r = db_query($q);
   return $r;            
}

function brick_chapter_header() {
 //$_SESSION['HEADER'] = 'header-sv.png'; // debug
 return(file_create_url(file_build_uri($_SESSION['HEADER'])));
}

function brick_menu() {
  $items['node/%/rsvp'] = array(
    'page callback' => 'brick_dorsvp',
    'page arguments' => array(1),
    'access callback' => 'brick_access',
    'access arguments' => array(1),
  );

  $items['node/%/add'] = array(
      'title' => 'Add',
      'page callback' => 'brick_add_node',
      'page arguments' => array(1),
      'access callback' => 'brick_access', 
      'weight' => 10,
      'type' => MENU_LOCAL_TASK
  );


  $items['node/%/copy'] = array(
      'title' => 'Copy',
      'page callback' => 'brick_copy_node',
      'page arguments' => array(1),
      'access callback' => 'brick_access', 
      'weight' => 20,
      'type' => MENU_LOCAL_TASK
  );


  $items["node/%/promote"] = array(
      'title' => 'Promote',
      'page callback' => 'brick_promote',
      'page arguments' => array(1),
      'access callback' => 'brick_access', 
      'weight' => 20,
      'type' => MENU_LOCAL_TASK
  );

  $chapterdata = brick_load_chapters();
 
  $items['chapters'] = array(
     'title' => 'Chapters',
     'page callback' => 'brick_switch_chapter',
     'page arguments' => array(1),
     'access callback' => 'brick_access',
     'weight' => -50,
     'menu_name' => 'main-menu',
     'expanded' => TRUE,
     'type' => MENU_NORMAL_ITEM
  );   


  while($chapter = $chapterdata->fetchAssoc()) {
    $items['chapters/' . $chapter['nid']] = array(
          'title' => $chapter['title'],
          'page callback' => 'brick_switch_chapter',
          'page arguments' => array(1, $chapter['nid']),
          'access callback' => 'brick_access',
          'weight' => 0,
          'tab_parent' => 'chapters',
          'menu_name' => 'main-menu',
          'type' => MENU_NORMAL_ITEM
     );
  }

  return $items;
}

function brick_switch_chapter($nid) {
  brick_set_chapter_globals($nid);

  // return to the same page that switched the chapter
  drupal_goto($_SERVER["HTTP_REFERER"]);
}

/*
 * resets the SESSION variables to the users "home" chapter
 * if $user is not set then they are not logged in and set set the value to the first chapter (SF)
 */
function brick_load_current_user_chapter() {
   global $user;
   
   $chapter_nid = 101; // default to chapter 101 - San Francisco

   if ($user) {
     $loadedUser = user_load($user->uid);

     if ($loadedUser->field_user_chapter) {
        $chapter_nid = $loadedUser->field_user_chapter['und'][0]['nid'];
     }
   }
   brick_set_chapter_globals($chapter_nid);
}

function brick_set_chapter_globals($chapter_nid) {
  $_SESSION['CHAPTER'] = $chapter_nid;
  $_SESSION['HEADER'] = 'header-sv.png'; // debug

  $q = "SELECT field_chapter_craigslist_stub_value
	  FROM field_data_field_chapter_craigslist_stub
	  WHERE entity_id =$chapter_nid";
  $_SESSION['CRAIGSLIST'] = db_query($q)->fetchField();

  $q = "SELECT field_chapter_twitter_url_value
	  FROM field_data_field_chapter_twitter_url
	  WHERE entity_id =$chapter_nid";
  $_SESSION['TWITTER'] = db_query($q)->fetchField();

  $q = "SELECT field_chapter_facebook_url_value 
	  FROM field_data_field_chapter_facebook_url
	  WHERE entity_id = $chapter_nid";
  $_SESSION['FACEBOOK'] = db_query($q)->fetchField();

  $q = "SELECT filename
	  FROM file_managed
	  JOIN field_data_field_chapter_header_image ON file_managed.fid = field_chapter_header_image_fid
	  WHERE  entity_id = $chapter_nid";
  $_SESSION['HEADER'] = db_query($q)->fetchField();

}

function brick_user_login() {
   brick_load_current_user_chapter();
}

/* 
 * Returns the current chapter.
 * This is normally stored in $_SESSION.  
 * If it is not set then we initialize $_SESSION from the users account.
 */
function brick_current_chapter() {
	if ($_SESSION && array_key_exists('CHAPTER', $_SESSION)) {
		// do nothing, we already have a chapter set
	} else {
   		brick_load_current_user_chapter(); // set the $_SESSION variables from the user account.
	}
	return ($_SESSION['CHAPTER']);
}

function brick_add_node($nid) {
  $node = node_load($nid);
  drupal_goto('node/add/'.$node->type);
}

function brick_copy_node($nid) {
  global $user;
  $node = node_load($nid);

  $node->nid = NULL;
  $node->vid = NULL;
  $node->tnid = NULL;
  $node->name = $user->name;
  $node->uid = $user->uid;
  $node->created = NULL;
  $node->path = NULL;
  $node->files = array();
  node_save($node);
  drupal_goto('node/'.$node->nid.'/edit');
}


function brick_trigger_info() {
  return array(
    'rsvp' => array(
      'brick_rsvp' => array(
        'label' => t('After the user RSVPs for an event'),
      ), 
      'brick_unrsvp' => array(
        'label' => t('After the user Un-RSVPs for an event'),
      ), 
    ),
  );
}

function trigger_action($name, $node, $options = array()) {
  $aids = trigger_get_assigned_actions($name);
  $context = array(
    'node' => $node,
    'title' => $node->title,
    'nid' => $node->nid,
    'body' => 'I just signed up for $node->field_title',
    'hook' => $name
  );
  actions_do(array_keys($aids), (object) $node, $context);
}

function brick_dorsvp($eid) {
  global $user;
  $note = "not set";
  $node = node_load($eid);

  brick_add_rsvp($eid, $user->uid, $note);
  trigger_action('brick_rsvp', $node);

  drupal_goto('node/' . $eid);
}

function brick_access() {
  return true;
}


function brick_safe_mailto($email, $subject, $show = "(email)") {
  $link = 'mailto:' . $email;
  $obfuscatedLink = "";
  for ($i=0; $i<strlen($link); $i++) {
    $obfuscatedLink .= "&#" . ord($link[$i]) . ";";
  }
  $result = "<a href=\" $obfuscatedLink";
  if (isset($subject)) {
    $result .= "?subject=$subject";
  }
  $result .= "\">$show</a>";
  return($result);
}

/**
 * $node is an event note. 
 *
 */
function brick_format_managment_list($node) {
  
  $result = "";
	
	$rsvp_list = brick_get_rsvp_list($node);
	$first_manager = true;
	while($rsvp = $rsvp_list->fetchAssoc()) {
		if($rsvp['role'] == "Manager") {
			if ($first_manager) {
				$first_manager = false;
				$result .= "Manager: ";
			}
			else {
				$result .= ", ";
			}
			$result .= $rsvp['fname']." ";
      if ($email = brick_1b_email($rsvp['uid'])) {
			  $result .= brick_safe_mailto($email, $node->title);
      }
		}
	}

	$rsvp_list = brick_get_rsvp_list($node);
	$first_coordinator = true;
	while($rsvp = $rsvp_list->fetchAssoc()) {
		if($rsvp['role'] == "Coordinator") {
			if ($first_coordinator) {
				$first_coordinator = false;
				if(!$first_manager) {
					$result .= "; ";
				}
				$result .= "Coordinator: ";
			}
			else {
				$result .= ", ";
			}
			$result .= $rsvp['fname']." ";
      if ($email = brick_1b_email($rsvp['uid'])) {
			  $result .= brick_safe_mailto($email, $node->title);
      }
		}
  }

  return($result);
}


function brick_theme() {
  $theme_functions = array();

  // Formatter theming functions.
  $formatters = array(
    'brick_item_count',
  );

  foreach ($formatters as $formatter) {
    $theme_functions[$formatter] = array(
      'arguments' => array('field' => NULL),
    );
  }
 
  return $theme_functions;
}

function brick_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
   $element = array();
   $element[0]['#markup'] = "<span class='count'>".sizeof($items)."</span>";
   return $element;
}

function brick_field_formatter_info() {
    return array(
    'brick_item_count' => array(
      'label' => t('Image Count'),
      'field types' => array('image'),
    ),
  );
}

function brick_boot () {
 if(empty($_SESSION['HEADER'])) {
    brick_set_chapter_globals(101);// The first time someone visits the site we set them to the SF chapter.
  }
}

?>
@
