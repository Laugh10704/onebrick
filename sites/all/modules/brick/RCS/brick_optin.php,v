head	1.33;
access;
symbols;
locks; strict;
comment	@# @;


1.33
date	2013.10.03.22.25.10;	author crc;	state Exp;
branches;
next	1.32;

1.32
date	2013.09.19.21.41.49;	author jordan;	state Exp;
branches;
next	1.31;

1.31
date	2013.07.30.22.39.22;	author jordan;	state Exp;
branches;
next	1.30;

1.30
date	2013.07.26.22.12.28;	author jordan;	state Exp;
branches;
next	1.29;

1.29
date	2013.06.21.23.27.06;	author jacob;	state Exp;
branches;
next	1.28;

1.28
date	2013.06.21.22.41.00;	author jacob;	state Exp;
branches;
next	1.27;

1.27
date	2013.06.21.22.08.42;	author jacob;	state Exp;
branches;
next	1.26;

1.26
date	2013.06.21.07.47.40;	author jacob;	state Exp;
branches;
next	1.25;

1.25
date	2013.06.20.23.45.49;	author jacob;	state Exp;
branches;
next	1.24;

1.24
date	2013.06.18.23.29.56;	author jacob;	state Exp;
branches;
next	1.23;

1.23
date	2013.06.18.23.28.38;	author jacob;	state Exp;
branches;
next	1.22;

1.22
date	2013.04.17.02.47.38;	author jacob;	state Exp;
branches;
next	1.21;

1.21
date	2013.03.16.23.54.37;	author jacob;	state Exp;
branches;
next	1.20;

1.20
date	2013.01.29.05.44.50;	author jacob;	state Exp;
branches;
next	1.19;

1.19
date	2013.01.22.05.44.14;	author jacob;	state Exp;
branches;
next	1.18;

1.18
date	2013.01.22.05.20.03;	author jacob;	state Exp;
branches;
next	1.17;

1.17
date	2012.12.11.06.38.08;	author jacob;	state Exp;
branches;
next	1.16;

1.16
date	2012.12.11.06.15.36;	author jacob;	state Exp;
branches;
next	1.15;

1.15
date	2012.12.11.05.39.24;	author jacob;	state Exp;
branches;
next	1.14;

1.14
date	2012.12.11.04.56.42;	author jacob;	state Exp;
branches;
next	1.13;

1.13
date	2012.12.11.04.52.10;	author jacob;	state Exp;
branches;
next	1.12;

1.12
date	2012.12.11.04.48.36;	author jacob;	state Exp;
branches;
next	1.11;

1.11
date	2012.12.04.05.29.32;	author jacob;	state Exp;
branches;
next	1.10;

1.10
date	2012.11.27.05.13.13;	author jacob;	state Exp;
branches;
next	1.9;

1.9
date	2012.11.27.05.11.51;	author jacob;	state Exp;
branches;
next	1.8;

1.8
date	2012.10.18.17.26.27;	author jacob;	state Exp;
branches;
next	1.7;

1.7
date	2012.10.16.05.57.52;	author jacob;	state Exp;
branches;
next	1.6;

1.6
date	2012.10.10.02.12.37;	author jacob;	state Exp;
branches;
next	1.5;

1.5
date	2012.10.10.01.52.10;	author jacob;	state Exp;
branches;
next	1.4;

1.4
date	2012.10.10.00.09.46;	author jacob;	state Exp;
branches;
next	1.3;

1.3
date	2012.10.10.00.03.32;	author jacob;	state Exp;
branches;
next	1.2;

1.2
date	2012.10.10.00.00.16;	author jacob;	state Exp;
branches;
next	1.1;

1.1
date	2012.10.09.03.42.16;	author jacob;	state Exp;
branches;
next	;


desc
@Initial skeleton for opt-in popup.
@


1.33
log
@*** empty log message ***
@
text
@<?php

function brick_can_optin() {
	return brick_manager_access();
}

function brick_optin_string($eid, $uid = null) {
	global $user;

	if ($uid == null)
		$uid = $user->uid;

	$res = db_query('SELECT field_optin_role_value, field_optin_preference_value
		FROM field_data_field_optin_event event
			INNER JOIN field_data_field_optin_person person ON (event.entity_id = person.entity_id)
			INNER JOIN field_data_field_optin_preference preference ON (preference.entity_id = person.entity_id)
			INNER JOIN field_data_field_optin_role role ON (role.entity_id = preference.entity_id)
		WHERE field_optin_person_uid = :uid AND field_optin_event_nid = :eid',
		array(':uid' => $uid, ':eid' => $eid));

	$prefs = array();

	foreach ($res as $rec) {
		$star = '';
		if ($rec->field_optin_preference_value == 'Preferred')
			$star = '*';

		if ($rec->field_optin_role_value == 'Manager')
			array_push($prefs, "M$star");
		else
			array_push($prefs, "C$star");
	}

	$str = join(', ', $prefs);

	if ($str)
		$str = "($str)";

	return $str;
}

function brick_optin_string_long($eid, $uid = null) {
	$str = brick_optin_string($eid, $uid);
	$str = preg_replace('/[()]/', '', $str);
	$str = preg_replace('/M/', 'Manager: Available', $str);
	$str = preg_replace('/C/', 'Coordinator: Available', $str);
	$str = preg_replace('/Available\*/', 'Preferred', $str);
	return $str;
}

function brick_optin_get_availability($date, $uid = null) {
	global $user;

	if ($uid == null)
		$uid = $user->uid;

	$res = db_query('SELECT field_availability_count_value
		FROM field_data_field_availability_month month
			INNER JOIN field_data_field_availability_person person ON (month.entity_id = person.entity_id)
			INNER JOIN field_data_field_availability_count count ON (person.entity_id = count.entity_id)
		WHERE field_availability_person_uid = :uid AND
			DATE_FORMAT(field_availability_month_value, \'%Y-%m\') =
			DATE_FORMAT(FROM_UNIXTIME(:date), \'%Y-%m\')',
		array(':uid' => $uid, ':date' => $date));

	if ($res->rowCount() < 0)
		return -1;

	return $res->fetchColumn();
}

// Convert to a timestamp in the user's timezone
function brick_optin_fix_date($str, $from_tz, $to_tz)
{
	$obj = new DateObject($str, $from_tz);
	if ($to_tz)
		date_timezone_set($obj, timezone_open($to_tz));
	return $obj->getTimestamp();
}

function brick_optin_page($nid) {
	echo <<<EOF
<html>
<head>
	<link rel='stylesheet' type='text/css' href='/sites/all/themes/onebrick_tarski/css/optin.css' />
</head>
<body>
EOF;
	echo drupal_render(drupal_get_form('brick_optin_form', $nid)),
		'</body></html>';
}

function brick_optin_form($form, $form_state, $nid) {
	global $user;

	$manager_default = 0;
	$coordinator_default = 0;
	$manager_locked = 0;
	$coordinator_locked = 0;
	$availability_default = 0;

	// Look up existing opt-in preferences
	$res = db_query('SELECT field_optin_role_value, field_optin_preference_value, field_optin_selected_value
		FROM field_data_field_optin_event event
			INNER JOIN field_data_field_optin_person person ON (event.entity_id = person.entity_id)
			INNER JOIN field_data_field_optin_preference preference ON (preference.entity_id = person.entity_id)
			INNER JOIN field_data_field_optin_role role ON (role.entity_id = preference.entity_id)
			INNER JOIN field_data_field_optin_selected selected ON (selected.entity_id = preference.entity_id)
		WHERE field_optin_person_uid = :uid AND field_optin_event_nid = :eid',
		array(':uid' => $user->uid, ':eid' => $nid));

	foreach ($res as $rec) {
		$val = brick_optin_pref_string_to_val($rec->field_optin_preference_value);
		$locked = ($rec->field_optin_selected_value == 'Yes');

		if ($rec->field_optin_role_value == 'Manager') {
			$manager_default = $val;
			$manager_locked = $locked;
		} else {
			$coordinator_default = $val;
			$coordinator_locked = $locked;
		}
	}

	// Look up event details
	$event = node_load($nid);
	// print_r($event);
	$title = $event->title;
	$title_fmt = "<a href='/node/$nid' target='_blank'>$title</a>";
	$body = $event->body['und'][0]['value'];
	$summary = $event->body['und'][0]['safe_summary'];
	$from_tz = $event->field_event_date['und'][0]['timezone_db'];
	$to_tz = $event->field_event_date['und'][0]['timezone'];
	$start = brick_optin_fix_date($event->field_event_date['und'][0]['value'], $from_tz, $to_tz);
	$end = brick_optin_fix_date($event->field_event_date['und'][0]['value2'], $from_tz, $to_tz);

	$site = node_load($event->field_event_site['und'][0]['nid']);
	$address = location_address2singleline($site->location);
	$address_fmt = "$address <a title='Google Map' href='http://maps.google.com/maps?q=$address' target='_blank'><img width='20' src='/sites/default/files/images/google_maps.png' /></a>";

	$date_fmt = date('Y-m-d', $start);
	$start_fmt = date('g:ia', $start);
	$end_fmt = date('g:ia', $end);

	// Look up existing max availability
	$date = brick_optin_get_event_date($nid);
	$availability_val = brick_optin_get_availability($date, $user->uid);
	if ($availability_val >= 0)
		$availability_default = $availability_val;

	$options = array(
		0 => t('Opt-Out'),
		1 => t('Available'),
		2 => t('Preferred'),
	);

	$form['optin'] = array(
		'#type' => 'container',
		'#id' => 'brick-opt-in-form',
		'#attributes' => array(
			'id' => 'optinFormWrap'
		)
	);

	$form['optin']['optin_title'] = array(
		'#type' => 'container',
	);

	$form['optin']['optin_title']['value'] = array(
		'#markup' => $title_fmt,
	);

	$form['optin']['optin_date'] = array(
		'#type' => 'container',
	);

	$form['optin']['optin_date']['value'] = array(
		'#markup' => "$date_fmt, $start_fmt - $end_fmt",
	);

	$form['optin']['optin_address'] = array(
		'#type' => 'container',
	);

	$form['optin']['optin_address']['value'] = array(
		'#markup' => $address_fmt,
	);

	$form['optin']['optin_summary'] = array(
		'#type' => 'container',
	);

	$form['optin']['optin_summary']['value'] = array(
		'#markup' => $summary,
	);

	$form['optin']['nid'] = array(
		'#type' => 'hidden',
		'#value' => $nid,
		'#default_value' => $nid,
	);

	if (user_has_role('Manager')) {
		$form['optin']['optin_manager'] = array(
			'#type' => 'radios',
			'#title' => t('Manager'),
			'#options' => $options,
			'#default_value' => $manager_default,
			'#required' => FALSE
		);
	}

	$form['optin']['optin_coordinator'] = array(
		'#type' => 'radios',
		'#title' => t('Coordinator'),
		'#options' => $options,
		'#default_value' => $coordinator_default,
		'#required' => FALSE
	);

	if ($manager_locked) {
		$form['optin']['optin_manager']['#disabled'] = TRUE;
		$form['optin']['optin_manager']['#title'] = t('Manager - <b>Assigned, cannot edit</b>');
	}

	if ($coordinator_locked) {
		$form['optin']['optin_coordinator']['#disabled'] = TRUE;
		$form['optin']['optin_coordinator']['#title'] = t('Coordinator - <b>Assigned, cannot edit</b>');
	}

	$availability_options = array(
		0 => t('No events this month'),
		1 => '1 ' . t('EVEnt'),
	);

	for ($i = 2; $i <= 10; $i++) {
		$availability_options[$i] = "$i " . t('events');
	}

	$form['optin']['optin_availability'] = array(
		'#type' => 'select',
		'#title' => t('Max Availability for ') . date('F', $date),
		'#options' => $availability_options,
		'#default_value' => $availability_default,
	);

	$form['optin']['buttonArea']['submit'] = array(
		'#type' => 'button',
		'#value' => t('Save'),
		'#ajax' => array(
			'callback' => 'brick_optin_ajax',
			'wrapper' => 'optinFormWrap',
		),
	);


	return $form;
}

// TODO: Adjust for user timezone
function brick_optin_get_event_date($eid) {
	$res = db_query('SELECT UNIX_TIMESTAMP(field_event_date_value)
		FROM field_data_field_event_date
		WHERE entity_id = :eid', array(':eid' => $eid));

	return $res->fetchColumn(0);
}

function brick_optin_pref_val_to_string($val) {
	return ($val == 1) ? 'Available' : 'Preferred';
}

function brick_optin_pref_string_to_val($str) {
	return ($str == 'Available') ? 1 : 2;
}

// TODO: authentication
function brick_optin_ajax($form, $form_state) {
        global $user;

	$uid = $user->uid;
	$eid = $form_state['values']['nid'];
	$manager = $form_state['values']['optin_manager'];
	$coordinator = $form_state['values']['optin_coordinator'];
	$availability = $form_state['values']['optin_availability'];

	$manager_val = brick_optin_pref_val_to_string($manager);
	$coordinator_val = brick_optin_pref_val_to_string($coordinator);

	if ($manager > 0)
		brick_optin_set_preference($uid, $eid, 'Manager', $manager_val);
	else
		brick_optin_remove($uid, $eid, 'Manager');

	if ($coordinator > 0)
		brick_optin_set_preference($uid, $eid, 'Coordinator', $coordinator_val);
	else
		brick_optin_remove($uid, $eid, 'Coordinator');

	$date = brick_optin_get_event_date($eid);
	brick_optin_set_availability($date, $availability, $uid);

	drupal_set_message(t('Your opt-in preferences have been saved.'), 'status');

	$commands = array();

	// Reset the Drupal messages.
	$commands[] = ajax_command_remove('div.messages');
	$commands[] = ajax_command_before('#main-content', theme('status_messages'));

	// Close the colorbox popup.
	$commands[] = brick_ajax_command_close_colorbox();

	// Let's update the coloring.
	$status = brick_event_status_class($eid);
	$commands[] = ajax_command_data('a[href="/node/' . $eid . '"] span[data-event-status]', 'event-status', $status);

	// And the opt-in text.
	$optinText = 'Opt-In ' . brick_optin_string($eid);
	$commands[] = brick_ajax_command_raw_html('div.calendar\\.' . $eid . '\\.field_event_date\\.0\\.0 a[href$="optin"]', $optinText);

	return array('#type' => 'ajax', '#commands' => $commands);
}

function brick_optin_set_preference($uid, $eid, $role, $preference) {
	$res = brick_optin_get_existing($uid, $eid, $role);
	if ($res->rowCount() > 0) {
		$node = node_load($res->fetchColumn());
		$node->field_optin_preference['und'][0]['value'] = $preference;
		node_save($node);
	} else {
		brick_optin_add($uid, $eid, $role, $preference);
	}
}

function brick_optin_remove($uid, $eid, $role) {
	$res = brick_optin_get_existing($uid, $eid, $role);
	if ($res->rowCount() > 0) {
		node_delete($res->fetchCol());
	}
}

function brick_get_calendar_referer_date() {
	$referer = $_SERVER['HTTP_REFERER'];
	if (! $referer) {
		drupal_goto('calendar');
	}

	$date = new DateTime(date('Y-m'));

	// Mine the month out of the URL, if we can
	if (preg_match('/\/calendar\/(.*?)(\/|$)/', $referer, $matches)) {
		$date = new DateTime($matches[1]);
	}

	return $date;
}

function brick_optin_get_existing($uid, $eid, $role) {
	return db_query('SELECT event.entity_id
		FROM field_data_field_optin_event event
			INNER JOIN field_data_field_optin_person person ON (event.entity_id = person.entity_id)
			INNER JOIN field_data_field_optin_preference preference ON (preference.entity_id = person.entity_id)
			INNER JOIN field_data_field_optin_role role ON (role.entity_id = preference.entity_id)
		WHERE field_optin_person_uid = :uid AND
			field_optin_event_nid = :eid AND
			field_optin_role_value = :role',
		array(':uid' => $uid, ':eid' => $eid, ':role' => $role));
}

function brick_optin_add($uid, $eid, $role, $preference, $createdWhenAssigned = 'FALSE') {
	$node = new StdClass();
	$node->type = 'opt_in';
	$node->status = 1;
	$node->title = 'Opt In';
	$node->uid = $uid;
	$node->field_optin_person['und'][0]['uid'] = $uid;
	$node->field_optin_event['und'][0]['nid'] = $eid;
	$node->field_optin_role['und'][0]['value'] = $role;
	$node->field_optin_preference['und'][0]['value'] = $preference;
	$node->field_optin_selected['und'][0]['value'] = 'No';
	$node->field_optin_created_when_assign['und'][0]['value'] = $createdWhenAssigned;

	$node = node_submit($node);
	node_save($node);
}

function brick_optin_set_availability($date, $count, $uid = null) {
	global $user;

	if ($uid == null)
		$uid = $user->uid;
	
	// See if an entry already exists
	$res = db_query('SELECT count.entity_id
		FROM field_data_field_availability_count count
			INNER JOIN field_data_field_availability_person person ON (person.entity_id = count.entity_id)
			INNER JOIN field_data_field_availability_month month ON (month.entity_id = person.entity_id)
		WHERE field_availability_person_uid = :uid AND
			DATE_FORMAT(field_availability_month_value, \'%Y-%m\') =
			DATE_FORMAT(FROM_UNIXTIME(:date), \'%Y-%m\')',
		array(':uid' => $uid, ':date' => $date));
	
	// Update or insert
	if ($res->rowCount() > 0) {
		$nid = $res->fetchColumn();
		$node = node_load($nid);
		$node->field_availability_count['und'][0]['value'] = $count;
		node_save($node);
	} else {
		$node = new StdClass();
		$node->type = 'availability';
		$node->status = 1;
		$node->title = 'Availability';
		$node->uid = $uid;
		$node->field_availability_person['und'][0]['uid'] = $uid;
		$node->field_availability_month['und'][0]['value'] = date('Y-m-01 00:00:00', $date);
		$node->field_availability_count['und'][0]['value'] = $count;

		$node = node_submit($node);
		node_save($node);
	}
}

?>
@


1.32
log
@*** empty log message ***
@
text
@d233 1
a233 1
		1 => '1 ' . t('event'),
a342 57
function brick_opt_out_form($form, &$form_state) {
	$form = array();

	$form['opt-out'] = array(
		'#type' => 'container',
	);

	$form['opt-out']['date'] = array(
		'#type' => 'hidden',
		'#name' => 'date',
	);

	// This button is real, and really submits an AJAX call.
	// It should be hidden, since we have stuff we need to do before the
	// real call client-side.
	$form['opt-out']['submit'] = array(
		'#type' => 'submit',
		'#id' => 'opt-out-submit',
		'#value' => 'Opt out of month',
		'#ajax' => array(
			'callback' => 'brick_opt_out_form_ajax',
		),
	);

	// This button is fake, but should be shown. It calls the optOut()
	// function, which does some magic before triggering the above button.
	$form['opt-out']['fake-submit'] = array(
		'#type' => 'button',
		'#name' => 'fake-submit',
		'#id' => 'opt-out-button',
		'#value' => 'Opt out of month',
		'#attributes' => array(
			'onclick' => 'optOut(); return false;',
		),
	);

	return $form;
}

function brick_opt_out_form_ajax($form, $form_state) {
        global $user;
	$uid = $user->uid;	

	$date = new DateTime($form_state['values']['date']);

	brick_optin_set_availability($date->getTimestamp(), 0, $uid);

	drupal_set_message(t('@@num, You have opted out for @@date.',
		array('@@num' => $uid, '@@date' => $date->format('F'))), 'status');

	// Render the messages client-side
	$commands = array();
	$commands[] = ajax_command_remove('div.messages');
	$commands[] = ajax_command_before('#main-content', theme('status_messages'));
	return array('#type' => 'ajax', '#commands' => $commands);
}

@


1.31
log
@*** empty log message ***
@
text
@d256 1
d279 1
a279 1
	global $user;
d383 3
d390 2
a391 2
	drupal_set_message(t('You have opted out for @@date.',
		array('@@date' => $date->format('F'))), 'status');
@


1.30
log
@*** empty log message ***
@
text
@d4 1
a4 1
	return user_has_role('Coordinator');
@


1.29
log
@Add visible opt-out button to trigger some code and the real button.
@
text
@d424 1
a424 1
function brick_optin_add($uid, $eid, $role, $preference) {
d435 1
@


1.28
log
@Properly recolor events after ajaxy optins.
@
text
@d354 3
d366 12
@


1.27
log
@Update the opt-in text after ajax change.
@
text
@d306 1
a306 1
	// Reset the Drupal messages
d313 5
a317 1
	// Let's also update the opt-in text.
a320 3
	// And the coloring of the event.
	// XXX TODO

@


1.26
log
@Work on AJAXifying opt-ins/outs.
@
text
@d305 2
d309 11
a319 1
	$commands[] = ajax_command_insert('#close-colorbox-div', '<p />');
@


1.25
log
@Update calendar links.
@
text
@d159 1
d251 1
a252 2
			'callback' => 'brick_optin_ajax',
			'method' => 'html',
d303 6
a308 1
	return brick_build_refresh_page_command();
d329 23
a351 2
function brick_opt_out_month_ajax() {
	global $user;
d353 2
a354 1
	$uid = $user->uid;
a355 1
	$date = brick_get_calendar_referer_date();
d360 6
a365 1
	drupal_goto($_SERVER['HTTP_REFERER']);
@


1.24
log
@Fix links; "event/%" -> "node/%"
@
text
@d340 1
a340 1
		drupal_goto('calendar/month');
d346 1
a346 1
	if (preg_match('/\/calendar\/month\/(.*?)(\/|$)/', $referer, $matches)) {
@


1.23
log
@Checking in Benson's date change.
@
text
@d129 1
a129 1
	$title_fmt = "<a href='/event/$nid' target='_blank'>$title</a>";
@


1.22
log
@Only let managers opt-in as managers.
@
text
@d332 2
a333 2
	drupal_set_message(t('You have opted out for @@date',
		array('@@date' => $date->format('Y-m'))), 'status');
@


1.21
log
@Add opt-out ajax call.
@
text
@d202 9
a210 7
	$form['optin']['optin_manager'] = array(
		'#type' => 'radios',
		'#title' => t('Manager'),
		'#options' => $options,
		'#default_value' => $manager_default,
		'#required' => FALSE
	);
@


1.20
log
@Moving this to brick_assign.php.
@
text
@d322 29
@


1.19
log
@Don't allow people to opt-out of assigned roles.
@
text
@a386 10
function brick_optin_event_assigned($nid, $uid = null) {
	global $user;

	if ($uid == null)
		$uid = $user->uid;

	// XXX TODO FIXME: Use actual logic
	return $nid % 2 == 1;
}

@


1.18
log
@Set the default 'selected' value to 'No' for new opt-ins.
@
text
@d98 2
d103 1
a103 1
	$res = db_query('SELECT field_optin_role_value, field_optin_preference_value
d108 1
d114 1
d116 1
a116 1
		if ($rec->field_optin_role_value == 'Manager')
d118 2
a119 1
		else
d121 2
d218 10
@


1.17
log
@Add longer-form version of opt-in string.
@
text
@d327 1
@


1.16
log
@Whoops, missed these prefixes.
Also, remove submit's prefix because it broke the calendar view.
@
text
@d42 9
@


1.15
log
@Scope optin ids appropriately.
@
text
@d218 1
a218 1
	$form['optin']['buttonArea']['optin_submit'] = array(
d254 3
a256 3
	$manager = $form_state['values']['manager'];
	$coordinator = $form_state['values']['coordinator'];
	$availability = $form_state['values']['availability'];
@


1.14
log
@Change opt-in event title to link to full node.
@
text
@d148 1
a148 1
	$form['optin']['title'] = array(
d152 1
a152 1
	$form['optin']['title']['value'] = array(
d156 1
a156 1
	$form['optin']['date'] = array(
d160 1
a160 1
	$form['optin']['date']['value'] = array(
d164 1
a164 1
	$form['optin']['address'] = array(
d168 1
a168 1
	$form['optin']['address']['value'] = array(
d172 1
a172 1
	$form['optin']['summary'] = array(
d176 1
a176 1
	$form['optin']['summary']['value'] = array(
d186 1
a186 1
	$form['optin']['manager'] = array(
d194 1
a194 1
	$form['optin']['coordinator'] = array(
d211 1
a211 1
	$form['optin']['availability'] = array(
d218 1
a218 1
	$form['optin']['buttonArea']['submit'] = array(
@


1.13
log
@Whoops, bug-bustin'.
@
text
@d113 1
d153 1
a153 1
		'#markup' => $title,
@


1.12
log
@More event information in the opt-in popup.
@
text
@d68 1
a68 1
		date_timezone_set($str, timezone_open($to_tz));
@


1.11
log
@Mock out is_assigned logic.
@
text
@d114 1
d120 4
d160 9
a168 1
		'#markup' => $date_fmt,
d171 1
a171 1
	$form['optin']['time'] = array(
d175 2
a176 2
	$form['optin']['time']['value'] = array(
		'#markup' => "$start_fmt - $end_fmt",
@


1.10
log
@Fix bug for when timezone is unset.
@
text
@d346 10
@


1.9
log
@Opt-in popup prettifications.
@
text
@d67 2
a68 1
	date_timezone_set($str, timezone_open($to_tz));
@


1.8
log
@Show month name in opt-in/availability popup.
@
text
@d3 5
a7 2
// To determine if any preference exists for the event/user.
function brick_optin_exists($eid, $uid = null) {
d13 1
a13 1
	$res = db_query('SELECT COUNT(*)
d16 2
d21 19
a39 1
	return $res->rowCount() > 0;
d63 8
d72 9
a80 1
	print drupal_render(drupal_get_form('brick_optin_form', $nid));
d108 14
d141 24
@


1.7
log
@Add page rendering for opt-in form.
@
text
@d121 1
a121 1
		'#title' => t('Max Availability'),
@


1.6
log
@Save availability information.
@
text
@d40 4
@


1.5
log
@Load max availability info.
@
text
@d175 3
d227 37
@


1.4
log
@Some cleanup.
@
text
@d3 37
d47 1
d65 6
d135 9
d182 1
a182 1
		$node = node_load($res->fetchCol());
@


1.3
log
@Refresh page on opt-in save.
@
text
@d8 1
d10 7
a16 1
	$res = db_query('SELECT field_optin_role_value, field_optin_preference_value FROM field_data_field_optin_event INNER JOIN field_data_field_optin_person ON (field_data_field_optin_event.entity_id = field_data_field_optin_person.entity_id) INNER JOIN field_data_field_optin_preference ON (field_data_field_optin_preference.entity_id = field_data_field_optin_person.entity_id) INNER JOIN field_data_field_optin_role ON (field_data_field_optin_role.entity_id = field_data_field_optin_preference.entity_id) WHERE field_optin_person_uid = :uid AND field_optin_event_nid = :eid', array(':uid' => $user->uid, ':eid' => $nid));
d19 1
a19 1
		$val = ($rec->field_optin_preference_value == 'Available') ? 1 : 2;
a26 2
	$availability_default = 0;

d91 1
a91 1
function brick_optin_preference_val_to_string($val) {
d95 4
d109 2
a110 2
	$manager_val = brick_optin_preference_val_to_string($manager);
	$coordinator_val = brick_optin_preference_val_to_string($coordinator);
@


1.2
log
@Hey, actually save/update values!
@
text
@d112 3
@


1.1
log
@Initial revision
@
text
@d6 15
a20 1
	$account = user_load($user->uid);
d23 1
d29 1
a29 1
		'#type' => "container",
d35 6
d42 1
a42 1
		'#type' => 'checkboxes',
d45 1
d50 1
a50 1
		'#type' => 'checkboxes',
d53 1
d70 1
d83 2
a84 9
	$form['optin']['buttonArea']['optout'] = array(
		'#type' => 'button',
		'#value' => t('Opt-out'),
		'#ajax' => array(
			'wrapper' => 'optinFormWrap',
			'callback' => 'brick_optin_ajax',
			'method' => 'html',
		),
	);
d86 2
a87 1
	return $form;
d90 1
d92 65
@
